/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as IndexImport } from './routes/index'
import { Route as CookIndexImport } from './routes/cook/index'
import { Route as PaymentSuccessImport } from './routes/payment/success'
import { Route as PaymentCancelImport } from './routes/payment/cancel'
import { Route as AdminSubcategoriesIndexImport } from './routes/admin/subcategories/index'
import { Route as AdminIngredientsIndexImport } from './routes/admin/ingredients/index'
import { Route as AdminFoodsIndexImport } from './routes/admin/foods/index'
import { Route as AdminCategoriesIndexImport } from './routes/admin/categories/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CookIndexRoute = CookIndexImport.update({
  id: '/cook/',
  path: '/cook/',
  getParentRoute: () => rootRoute,
} as any)

const PaymentSuccessRoute = PaymentSuccessImport.update({
  id: '/payment/success',
  path: '/payment/success',
  getParentRoute: () => rootRoute,
} as any)

const PaymentCancelRoute = PaymentCancelImport.update({
  id: '/payment/cancel',
  path: '/payment/cancel',
  getParentRoute: () => rootRoute,
} as any)

const AdminSubcategoriesIndexRoute = AdminSubcategoriesIndexImport.update({
  id: '/subcategories/',
  path: '/subcategories/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminIngredientsIndexRoute = AdminIngredientsIndexImport.update({
  id: '/ingredients/',
  path: '/ingredients/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminFoodsIndexRoute = AdminFoodsIndexImport.update({
  id: '/foods/',
  path: '/foods/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminCategoriesIndexRoute = AdminCategoriesIndexImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => AdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/payment/cancel': {
      id: '/payment/cancel'
      path: '/payment/cancel'
      fullPath: '/payment/cancel'
      preLoaderRoute: typeof PaymentCancelImport
      parentRoute: typeof rootRoute
    }
    '/payment/success': {
      id: '/payment/success'
      path: '/payment/success'
      fullPath: '/payment/success'
      preLoaderRoute: typeof PaymentSuccessImport
      parentRoute: typeof rootRoute
    }
    '/cook/': {
      id: '/cook/'
      path: '/cook'
      fullPath: '/cook'
      preLoaderRoute: typeof CookIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/categories/': {
      id: '/admin/categories/'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/foods/': {
      id: '/admin/foods/'
      path: '/foods'
      fullPath: '/admin/foods'
      preLoaderRoute: typeof AdminFoodsIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/ingredients/': {
      id: '/admin/ingredients/'
      path: '/ingredients'
      fullPath: '/admin/ingredients'
      preLoaderRoute: typeof AdminIngredientsIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/subcategories/': {
      id: '/admin/subcategories/'
      path: '/subcategories'
      fullPath: '/admin/subcategories'
      preLoaderRoute: typeof AdminSubcategoriesIndexImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminCategoriesIndexRoute: typeof AdminCategoriesIndexRoute
  AdminFoodsIndexRoute: typeof AdminFoodsIndexRoute
  AdminIngredientsIndexRoute: typeof AdminIngredientsIndexRoute
  AdminSubcategoriesIndexRoute: typeof AdminSubcategoriesIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminCategoriesIndexRoute: AdminCategoriesIndexRoute,
  AdminFoodsIndexRoute: AdminFoodsIndexRoute,
  AdminIngredientsIndexRoute: AdminIngredientsIndexRoute,
  AdminSubcategoriesIndexRoute: AdminSubcategoriesIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/cook': typeof CookIndexRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/foods': typeof AdminFoodsIndexRoute
  '/admin/ingredients': typeof AdminIngredientsIndexRoute
  '/admin/subcategories': typeof AdminSubcategoriesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/cook': typeof CookIndexRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/foods': typeof AdminFoodsIndexRoute
  '/admin/ingredients': typeof AdminIngredientsIndexRoute
  '/admin/subcategories': typeof AdminSubcategoriesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/cook/': typeof CookIndexRoute
  '/admin/categories/': typeof AdminCategoriesIndexRoute
  '/admin/foods/': typeof AdminFoodsIndexRoute
  '/admin/ingredients/': typeof AdminIngredientsIndexRoute
  '/admin/subcategories/': typeof AdminSubcategoriesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/payment/cancel'
    | '/payment/success'
    | '/cook'
    | '/admin/categories'
    | '/admin/foods'
    | '/admin/ingredients'
    | '/admin/subcategories'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/login'
    | '/payment/cancel'
    | '/payment/success'
    | '/cook'
    | '/admin/categories'
    | '/admin/foods'
    | '/admin/ingredients'
    | '/admin/subcategories'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/payment/cancel'
    | '/payment/success'
    | '/cook/'
    | '/admin/categories/'
    | '/admin/foods/'
    | '/admin/ingredients/'
    | '/admin/subcategories/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  PaymentCancelRoute: typeof PaymentCancelRoute
  PaymentSuccessRoute: typeof PaymentSuccessRoute
  CookIndexRoute: typeof CookIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  PaymentCancelRoute: PaymentCancelRoute,
  PaymentSuccessRoute: PaymentSuccessRoute,
  CookIndexRoute: CookIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/login",
        "/payment/cancel",
        "/payment/success",
        "/cook/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/categories/",
        "/admin/foods/",
        "/admin/ingredients/",
        "/admin/subcategories/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/payment/cancel": {
      "filePath": "payment/cancel.tsx"
    },
    "/payment/success": {
      "filePath": "payment/success.tsx"
    },
    "/cook/": {
      "filePath": "cook/index.tsx"
    },
    "/admin/categories/": {
      "filePath": "admin/categories/index.tsx",
      "parent": "/admin"
    },
    "/admin/foods/": {
      "filePath": "admin/foods/index.tsx",
      "parent": "/admin"
    },
    "/admin/ingredients/": {
      "filePath": "admin/ingredients/index.tsx",
      "parent": "/admin"
    },
    "/admin/subcategories/": {
      "filePath": "admin/subcategories/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
