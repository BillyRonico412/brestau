// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/generated/zod"
}

model Category {
  id            String        @id @default(cuid())
  title         String        @unique
  subCategories SubCategory[]
}

model SubCategory {
  id         String   @id @default(cuid())
  title      String   @unique
  image      String
  foods      Food[]
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
}

model Food {
  id              String       @id @default(cuid())
  title           String       @unique
  description     String
  image           String
  subCategoryId   String
  subCategory     SubCategory  @relation(fields: [subCategoryId], references: [id])
  price           Float
  ingredients     Ingredient[]
  estimatedTimeMn Int
  orderItem       OrderItem[]
}

model Ingredient {
  id                 String      @id @default(cuid())
  title              String      @unique
  foods              Food[]
  vegetarian         Boolean
  halal              Boolean
  noGluten           Boolean
  noLactose          Boolean
  orderItemToRemoved OrderItem[]
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StripeStatus {
  PENDING
  PAID
  FAILED
}

model Order {
  id              String       @id @default(cuid())
  counter         Int          @default(autoincrement())
  items           OrderItem[]
  stripeSessionId String
  stripeStatus    StripeStatus @default(PENDING)
  serverId        String?
  server          User?        @relation(fields: [serverId], references: [id], onDelete: SetNull)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model OrderItem {
  id                 String       @id @default(cuid())
  orderId            String
  order              Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  foodId             String
  food               Food         @relation(fields: [foodId], references: [id], onDelete: Cascade)
  quantity           Int
  status             OrderStatus  @default(PENDING)
  removedIngredients Ingredient[]
  cookerId           String?
  cooker             User?        @relation(fields: [cookerId], references: [id], onDelete: SetNull)
}

model User {
  id               String      @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  userType         String
  sessions         Session[]
  accounts         Account[]
  cookerOrderItems OrderItem[]
  serverOrders     Order[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
