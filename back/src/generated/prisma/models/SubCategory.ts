
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `SubCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model SubCategory
 * 
 */
export type SubCategoryModel = runtime.Types.Result.DefaultSelection<Prisma.$SubCategoryPayload>

export type AggregateSubCategory = {
  _count: SubCategoryCountAggregateOutputType | null
  _min: SubCategoryMinAggregateOutputType | null
  _max: SubCategoryMaxAggregateOutputType | null
}

export type SubCategoryMinAggregateOutputType = {
  id: string | null
  title: string | null
  image: string | null
  categoryId: string | null
}

export type SubCategoryMaxAggregateOutputType = {
  id: string | null
  title: string | null
  image: string | null
  categoryId: string | null
}

export type SubCategoryCountAggregateOutputType = {
  id: number
  title: number
  image: number
  categoryId: number
  _all: number
}


export type SubCategoryMinAggregateInputType = {
  id?: true
  title?: true
  image?: true
  categoryId?: true
}

export type SubCategoryMaxAggregateInputType = {
  id?: true
  title?: true
  image?: true
  categoryId?: true
}

export type SubCategoryCountAggregateInputType = {
  id?: true
  title?: true
  image?: true
  categoryId?: true
  _all?: true
}

export type SubCategoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SubCategory to aggregate.
   */
  where?: Prisma.SubCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubCategories to fetch.
   */
  orderBy?: Prisma.SubCategoryOrderByWithRelationInput | Prisma.SubCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SubCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SubCategories
  **/
  _count?: true | SubCategoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SubCategoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SubCategoryMaxAggregateInputType
}

export type GetSubCategoryAggregateType<T extends SubCategoryAggregateArgs> = {
      [P in keyof T & keyof AggregateSubCategory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateSubCategory[P]>
}




export type SubCategoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubCategoryWhereInput
  orderBy?: Prisma.SubCategoryOrderByWithAggregationInput | Prisma.SubCategoryOrderByWithAggregationInput[]
  by: Prisma.SubCategoryScalarFieldEnum[] | Prisma.SubCategoryScalarFieldEnum
  having?: Prisma.SubCategoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SubCategoryCountAggregateInputType | true
  _min?: SubCategoryMinAggregateInputType
  _max?: SubCategoryMaxAggregateInputType
}

export type SubCategoryGroupByOutputType = {
  id: string
  title: string
  image: string
  categoryId: string
  _count: SubCategoryCountAggregateOutputType | null
  _min: SubCategoryMinAggregateOutputType | null
  _max: SubCategoryMaxAggregateOutputType | null
}

type GetSubCategoryGroupByPayload<T extends SubCategoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SubCategoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SubCategoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubCategoryGroupByOutputType[P]>
      }
    >
  > 



export type SubCategoryWhereInput = {
  AND?: Prisma.SubCategoryWhereInput | Prisma.SubCategoryWhereInput[]
  OR?: Prisma.SubCategoryWhereInput[]
  NOT?: Prisma.SubCategoryWhereInput | Prisma.SubCategoryWhereInput[]
  id?: Prisma.StringFilter<"SubCategory"> | string
  title?: Prisma.StringFilter<"SubCategory"> | string
  image?: Prisma.StringFilter<"SubCategory"> | string
  categoryId?: Prisma.StringFilter<"SubCategory"> | string
  foods?: Prisma.FoodListRelationFilter
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.CategoryWhereInput>
}

export type SubCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  foods?: Prisma.FoodOrderByRelationAggregateInput
  category?: Prisma.CategoryOrderByWithRelationInput
}

export type SubCategoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  title?: string
  AND?: Prisma.SubCategoryWhereInput | Prisma.SubCategoryWhereInput[]
  OR?: Prisma.SubCategoryWhereInput[]
  NOT?: Prisma.SubCategoryWhereInput | Prisma.SubCategoryWhereInput[]
  image?: Prisma.StringFilter<"SubCategory"> | string
  categoryId?: Prisma.StringFilter<"SubCategory"> | string
  foods?: Prisma.FoodListRelationFilter
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.CategoryWhereInput>
}, "id" | "title">

export type SubCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  _count?: Prisma.SubCategoryCountOrderByAggregateInput
  _max?: Prisma.SubCategoryMaxOrderByAggregateInput
  _min?: Prisma.SubCategoryMinOrderByAggregateInput
}

export type SubCategoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.SubCategoryScalarWhereWithAggregatesInput | Prisma.SubCategoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.SubCategoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SubCategoryScalarWhereWithAggregatesInput | Prisma.SubCategoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SubCategory"> | string
  title?: Prisma.StringWithAggregatesFilter<"SubCategory"> | string
  image?: Prisma.StringWithAggregatesFilter<"SubCategory"> | string
  categoryId?: Prisma.StringWithAggregatesFilter<"SubCategory"> | string
}

export type SubCategoryCreateInput = {
  id?: string
  title: string
  image: string
  foods?: Prisma.FoodCreateNestedManyWithoutSubCategoryInput
  category: Prisma.CategoryCreateNestedOneWithoutSubCategoriesInput
}

export type SubCategoryUncheckedCreateInput = {
  id?: string
  title: string
  image: string
  categoryId: string
  foods?: Prisma.FoodUncheckedCreateNestedManyWithoutSubCategoryInput
}

export type SubCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  foods?: Prisma.FoodUpdateManyWithoutSubCategoryNestedInput
  category?: Prisma.CategoryUpdateOneRequiredWithoutSubCategoriesNestedInput
}

export type SubCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
  foods?: Prisma.FoodUncheckedUpdateManyWithoutSubCategoryNestedInput
}

export type SubCategoryCreateManyInput = {
  id?: string
  title: string
  image: string
  categoryId: string
}

export type SubCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SubCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SubCategoryListRelationFilter = {
  every?: Prisma.SubCategoryWhereInput
  some?: Prisma.SubCategoryWhereInput
  none?: Prisma.SubCategoryWhereInput
}

export type SubCategoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SubCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
}

export type SubCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
}

export type SubCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
}

export type SubCategoryScalarRelationFilter = {
  is?: Prisma.SubCategoryWhereInput
  isNot?: Prisma.SubCategoryWhereInput
}

export type SubCategoryCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.SubCategoryCreateWithoutCategoryInput, Prisma.SubCategoryUncheckedCreateWithoutCategoryInput> | Prisma.SubCategoryCreateWithoutCategoryInput[] | Prisma.SubCategoryUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.SubCategoryCreateOrConnectWithoutCategoryInput | Prisma.SubCategoryCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.SubCategoryCreateManyCategoryInputEnvelope
  connect?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
}

export type SubCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.SubCategoryCreateWithoutCategoryInput, Prisma.SubCategoryUncheckedCreateWithoutCategoryInput> | Prisma.SubCategoryCreateWithoutCategoryInput[] | Prisma.SubCategoryUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.SubCategoryCreateOrConnectWithoutCategoryInput | Prisma.SubCategoryCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.SubCategoryCreateManyCategoryInputEnvelope
  connect?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
}

export type SubCategoryUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.SubCategoryCreateWithoutCategoryInput, Prisma.SubCategoryUncheckedCreateWithoutCategoryInput> | Prisma.SubCategoryCreateWithoutCategoryInput[] | Prisma.SubCategoryUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.SubCategoryCreateOrConnectWithoutCategoryInput | Prisma.SubCategoryCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.SubCategoryUpsertWithWhereUniqueWithoutCategoryInput | Prisma.SubCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.SubCategoryCreateManyCategoryInputEnvelope
  set?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
  disconnect?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
  delete?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
  connect?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
  update?: Prisma.SubCategoryUpdateWithWhereUniqueWithoutCategoryInput | Prisma.SubCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.SubCategoryUpdateManyWithWhereWithoutCategoryInput | Prisma.SubCategoryUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.SubCategoryScalarWhereInput | Prisma.SubCategoryScalarWhereInput[]
}

export type SubCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.SubCategoryCreateWithoutCategoryInput, Prisma.SubCategoryUncheckedCreateWithoutCategoryInput> | Prisma.SubCategoryCreateWithoutCategoryInput[] | Prisma.SubCategoryUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.SubCategoryCreateOrConnectWithoutCategoryInput | Prisma.SubCategoryCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.SubCategoryUpsertWithWhereUniqueWithoutCategoryInput | Prisma.SubCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.SubCategoryCreateManyCategoryInputEnvelope
  set?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
  disconnect?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
  delete?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
  connect?: Prisma.SubCategoryWhereUniqueInput | Prisma.SubCategoryWhereUniqueInput[]
  update?: Prisma.SubCategoryUpdateWithWhereUniqueWithoutCategoryInput | Prisma.SubCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.SubCategoryUpdateManyWithWhereWithoutCategoryInput | Prisma.SubCategoryUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.SubCategoryScalarWhereInput | Prisma.SubCategoryScalarWhereInput[]
}

export type SubCategoryCreateNestedOneWithoutFoodsInput = {
  create?: Prisma.XOR<Prisma.SubCategoryCreateWithoutFoodsInput, Prisma.SubCategoryUncheckedCreateWithoutFoodsInput>
  connectOrCreate?: Prisma.SubCategoryCreateOrConnectWithoutFoodsInput
  connect?: Prisma.SubCategoryWhereUniqueInput
}

export type SubCategoryUpdateOneRequiredWithoutFoodsNestedInput = {
  create?: Prisma.XOR<Prisma.SubCategoryCreateWithoutFoodsInput, Prisma.SubCategoryUncheckedCreateWithoutFoodsInput>
  connectOrCreate?: Prisma.SubCategoryCreateOrConnectWithoutFoodsInput
  upsert?: Prisma.SubCategoryUpsertWithoutFoodsInput
  connect?: Prisma.SubCategoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SubCategoryUpdateToOneWithWhereWithoutFoodsInput, Prisma.SubCategoryUpdateWithoutFoodsInput>, Prisma.SubCategoryUncheckedUpdateWithoutFoodsInput>
}

export type SubCategoryCreateWithoutCategoryInput = {
  id?: string
  title: string
  image: string
  foods?: Prisma.FoodCreateNestedManyWithoutSubCategoryInput
}

export type SubCategoryUncheckedCreateWithoutCategoryInput = {
  id?: string
  title: string
  image: string
  foods?: Prisma.FoodUncheckedCreateNestedManyWithoutSubCategoryInput
}

export type SubCategoryCreateOrConnectWithoutCategoryInput = {
  where: Prisma.SubCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.SubCategoryCreateWithoutCategoryInput, Prisma.SubCategoryUncheckedCreateWithoutCategoryInput>
}

export type SubCategoryCreateManyCategoryInputEnvelope = {
  data: Prisma.SubCategoryCreateManyCategoryInput | Prisma.SubCategoryCreateManyCategoryInput[]
  skipDuplicates?: boolean
}

export type SubCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.SubCategoryWhereUniqueInput
  update: Prisma.XOR<Prisma.SubCategoryUpdateWithoutCategoryInput, Prisma.SubCategoryUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.SubCategoryCreateWithoutCategoryInput, Prisma.SubCategoryUncheckedCreateWithoutCategoryInput>
}

export type SubCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.SubCategoryWhereUniqueInput
  data: Prisma.XOR<Prisma.SubCategoryUpdateWithoutCategoryInput, Prisma.SubCategoryUncheckedUpdateWithoutCategoryInput>
}

export type SubCategoryUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.SubCategoryScalarWhereInput
  data: Prisma.XOR<Prisma.SubCategoryUpdateManyMutationInput, Prisma.SubCategoryUncheckedUpdateManyWithoutCategoryInput>
}

export type SubCategoryScalarWhereInput = {
  AND?: Prisma.SubCategoryScalarWhereInput | Prisma.SubCategoryScalarWhereInput[]
  OR?: Prisma.SubCategoryScalarWhereInput[]
  NOT?: Prisma.SubCategoryScalarWhereInput | Prisma.SubCategoryScalarWhereInput[]
  id?: Prisma.StringFilter<"SubCategory"> | string
  title?: Prisma.StringFilter<"SubCategory"> | string
  image?: Prisma.StringFilter<"SubCategory"> | string
  categoryId?: Prisma.StringFilter<"SubCategory"> | string
}

export type SubCategoryCreateWithoutFoodsInput = {
  id?: string
  title: string
  image: string
  category: Prisma.CategoryCreateNestedOneWithoutSubCategoriesInput
}

export type SubCategoryUncheckedCreateWithoutFoodsInput = {
  id?: string
  title: string
  image: string
  categoryId: string
}

export type SubCategoryCreateOrConnectWithoutFoodsInput = {
  where: Prisma.SubCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.SubCategoryCreateWithoutFoodsInput, Prisma.SubCategoryUncheckedCreateWithoutFoodsInput>
}

export type SubCategoryUpsertWithoutFoodsInput = {
  update: Prisma.XOR<Prisma.SubCategoryUpdateWithoutFoodsInput, Prisma.SubCategoryUncheckedUpdateWithoutFoodsInput>
  create: Prisma.XOR<Prisma.SubCategoryCreateWithoutFoodsInput, Prisma.SubCategoryUncheckedCreateWithoutFoodsInput>
  where?: Prisma.SubCategoryWhereInput
}

export type SubCategoryUpdateToOneWithWhereWithoutFoodsInput = {
  where?: Prisma.SubCategoryWhereInput
  data: Prisma.XOR<Prisma.SubCategoryUpdateWithoutFoodsInput, Prisma.SubCategoryUncheckedUpdateWithoutFoodsInput>
}

export type SubCategoryUpdateWithoutFoodsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.CategoryUpdateOneRequiredWithoutSubCategoriesNestedInput
}

export type SubCategoryUncheckedUpdateWithoutFoodsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SubCategoryCreateManyCategoryInput = {
  id?: string
  title: string
  image: string
}

export type SubCategoryUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  foods?: Prisma.FoodUpdateManyWithoutSubCategoryNestedInput
}

export type SubCategoryUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  foods?: Prisma.FoodUncheckedUpdateManyWithoutSubCategoryNestedInput
}

export type SubCategoryUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type SubCategoryCountOutputType
 */

export type SubCategoryCountOutputType = {
  foods: number
}

export type SubCategoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  foods?: boolean | SubCategoryCountOutputTypeCountFoodsArgs
}

/**
 * SubCategoryCountOutputType without action
 */
export type SubCategoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategoryCountOutputType
   */
  select?: Prisma.SubCategoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SubCategoryCountOutputType without action
 */
export type SubCategoryCountOutputTypeCountFoodsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FoodWhereInput
}


export type SubCategorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  image?: boolean
  categoryId?: boolean
  foods?: boolean | Prisma.SubCategory$foodsArgs<ExtArgs>
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.SubCategoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subCategory"]>

export type SubCategorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  image?: boolean
  categoryId?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subCategory"]>

export type SubCategorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  image?: boolean
  categoryId?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subCategory"]>

export type SubCategorySelectScalar = {
  id?: boolean
  title?: boolean
  image?: boolean
  categoryId?: boolean
}

export type SubCategoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "image" | "categoryId", ExtArgs["result"]["subCategory"]>
export type SubCategoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  foods?: boolean | Prisma.SubCategory$foodsArgs<ExtArgs>
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.SubCategoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type SubCategoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}
export type SubCategoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}

export type $SubCategoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SubCategory"
  objects: {
    foods: Prisma.$FoodPayload<ExtArgs>[]
    category: Prisma.$CategoryPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    image: string
    categoryId: string
  }, ExtArgs["result"]["subCategory"]>
  composites: {}
}

export type SubCategoryGetPayload<S extends boolean | null | undefined | SubCategoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload, S>

export type SubCategoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SubCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SubCategoryCountAggregateInputType | true
  }

export interface SubCategoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubCategory'], meta: { name: 'SubCategory' } }
  /**
   * Find zero or one SubCategory that matches the filter.
   * @param {SubCategoryFindUniqueArgs} args - Arguments to find a SubCategory
   * @example
   * // Get one SubCategory
   * const subCategory = await prisma.subCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubCategoryFindUniqueArgs>(args: Prisma.SelectSubset<T, SubCategoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SubCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubCategoryFindUniqueOrThrowArgs} args - Arguments to find a SubCategory
   * @example
   * // Get one SubCategory
   * const subCategory = await prisma.subCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubCategoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SubCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SubCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubCategoryFindFirstArgs} args - Arguments to find a SubCategory
   * @example
   * // Get one SubCategory
   * const subCategory = await prisma.subCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubCategoryFindFirstArgs>(args?: Prisma.SelectSubset<T, SubCategoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SubCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubCategoryFindFirstOrThrowArgs} args - Arguments to find a SubCategory
   * @example
   * // Get one SubCategory
   * const subCategory = await prisma.subCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubCategoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SubCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SubCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SubCategories
   * const subCategories = await prisma.subCategory.findMany()
   * 
   * // Get first 10 SubCategories
   * const subCategories = await prisma.subCategory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const subCategoryWithIdOnly = await prisma.subCategory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SubCategoryFindManyArgs>(args?: Prisma.SelectSubset<T, SubCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SubCategory.
   * @param {SubCategoryCreateArgs} args - Arguments to create a SubCategory.
   * @example
   * // Create one SubCategory
   * const SubCategory = await prisma.subCategory.create({
   *   data: {
   *     // ... data to create a SubCategory
   *   }
   * })
   * 
   */
  create<T extends SubCategoryCreateArgs>(args: Prisma.SelectSubset<T, SubCategoryCreateArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SubCategories.
   * @param {SubCategoryCreateManyArgs} args - Arguments to create many SubCategories.
   * @example
   * // Create many SubCategories
   * const subCategory = await prisma.subCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SubCategoryCreateManyArgs>(args?: Prisma.SelectSubset<T, SubCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SubCategories and returns the data saved in the database.
   * @param {SubCategoryCreateManyAndReturnArgs} args - Arguments to create many SubCategories.
   * @example
   * // Create many SubCategories
   * const subCategory = await prisma.subCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SubCategories and only return the `id`
   * const subCategoryWithIdOnly = await prisma.subCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SubCategoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SubCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SubCategory.
   * @param {SubCategoryDeleteArgs} args - Arguments to delete one SubCategory.
   * @example
   * // Delete one SubCategory
   * const SubCategory = await prisma.subCategory.delete({
   *   where: {
   *     // ... filter to delete one SubCategory
   *   }
   * })
   * 
   */
  delete<T extends SubCategoryDeleteArgs>(args: Prisma.SelectSubset<T, SubCategoryDeleteArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SubCategory.
   * @param {SubCategoryUpdateArgs} args - Arguments to update one SubCategory.
   * @example
   * // Update one SubCategory
   * const subCategory = await prisma.subCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SubCategoryUpdateArgs>(args: Prisma.SelectSubset<T, SubCategoryUpdateArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SubCategories.
   * @param {SubCategoryDeleteManyArgs} args - Arguments to filter SubCategories to delete.
   * @example
   * // Delete a few SubCategories
   * const { count } = await prisma.subCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SubCategoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, SubCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SubCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SubCategories
   * const subCategory = await prisma.subCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SubCategoryUpdateManyArgs>(args: Prisma.SelectSubset<T, SubCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SubCategories and returns the data updated in the database.
   * @param {SubCategoryUpdateManyAndReturnArgs} args - Arguments to update many SubCategories.
   * @example
   * // Update many SubCategories
   * const subCategory = await prisma.subCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SubCategories and only return the `id`
   * const subCategoryWithIdOnly = await prisma.subCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SubCategoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SubCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SubCategory.
   * @param {SubCategoryUpsertArgs} args - Arguments to update or create a SubCategory.
   * @example
   * // Update or create a SubCategory
   * const subCategory = await prisma.subCategory.upsert({
   *   create: {
   *     // ... data to create a SubCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SubCategory we want to update
   *   }
   * })
   */
  upsert<T extends SubCategoryUpsertArgs>(args: Prisma.SelectSubset<T, SubCategoryUpsertArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SubCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubCategoryCountArgs} args - Arguments to filter SubCategories to count.
   * @example
   * // Count the number of SubCategories
   * const count = await prisma.subCategory.count({
   *   where: {
   *     // ... the filter for the SubCategories we want to count
   *   }
   * })
  **/
  count<T extends SubCategoryCountArgs>(
    args?: Prisma.Subset<T, SubCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SubCategoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SubCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SubCategoryAggregateArgs>(args: Prisma.Subset<T, SubCategoryAggregateArgs>): Prisma.PrismaPromise<GetSubCategoryAggregateType<T>>

  /**
   * Group by SubCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SubCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubCategoryGroupByArgs['orderBy'] }
      : { orderBy?: SubCategoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SubCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SubCategory model
 */
readonly fields: SubCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SubCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubCategoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  foods<T extends Prisma.SubCategory$foodsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubCategory$foodsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  category<T extends Prisma.CategoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CategoryDefaultArgs<ExtArgs>>): Prisma.Prisma__CategoryClient<runtime.Types.Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SubCategory model
 */
export interface SubCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"SubCategory", 'String'>
  readonly title: Prisma.FieldRef<"SubCategory", 'String'>
  readonly image: Prisma.FieldRef<"SubCategory", 'String'>
  readonly categoryId: Prisma.FieldRef<"SubCategory", 'String'>
}
    

// Custom InputTypes
/**
 * SubCategory findUnique
 */
export type SubCategoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * Filter, which SubCategory to fetch.
   */
  where: Prisma.SubCategoryWhereUniqueInput
}

/**
 * SubCategory findUniqueOrThrow
 */
export type SubCategoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * Filter, which SubCategory to fetch.
   */
  where: Prisma.SubCategoryWhereUniqueInput
}

/**
 * SubCategory findFirst
 */
export type SubCategoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * Filter, which SubCategory to fetch.
   */
  where?: Prisma.SubCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubCategories to fetch.
   */
  orderBy?: Prisma.SubCategoryOrderByWithRelationInput | Prisma.SubCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SubCategories.
   */
  cursor?: Prisma.SubCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SubCategories.
   */
  distinct?: Prisma.SubCategoryScalarFieldEnum | Prisma.SubCategoryScalarFieldEnum[]
}

/**
 * SubCategory findFirstOrThrow
 */
export type SubCategoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * Filter, which SubCategory to fetch.
   */
  where?: Prisma.SubCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubCategories to fetch.
   */
  orderBy?: Prisma.SubCategoryOrderByWithRelationInput | Prisma.SubCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SubCategories.
   */
  cursor?: Prisma.SubCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SubCategories.
   */
  distinct?: Prisma.SubCategoryScalarFieldEnum | Prisma.SubCategoryScalarFieldEnum[]
}

/**
 * SubCategory findMany
 */
export type SubCategoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * Filter, which SubCategories to fetch.
   */
  where?: Prisma.SubCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubCategories to fetch.
   */
  orderBy?: Prisma.SubCategoryOrderByWithRelationInput | Prisma.SubCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SubCategories.
   */
  cursor?: Prisma.SubCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubCategories.
   */
  skip?: number
  distinct?: Prisma.SubCategoryScalarFieldEnum | Prisma.SubCategoryScalarFieldEnum[]
}

/**
 * SubCategory create
 */
export type SubCategoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * The data needed to create a SubCategory.
   */
  data: Prisma.XOR<Prisma.SubCategoryCreateInput, Prisma.SubCategoryUncheckedCreateInput>
}

/**
 * SubCategory createMany
 */
export type SubCategoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SubCategories.
   */
  data: Prisma.SubCategoryCreateManyInput | Prisma.SubCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SubCategory createManyAndReturn
 */
export type SubCategoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * The data used to create many SubCategories.
   */
  data: Prisma.SubCategoryCreateManyInput | Prisma.SubCategoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SubCategory update
 */
export type SubCategoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * The data needed to update a SubCategory.
   */
  data: Prisma.XOR<Prisma.SubCategoryUpdateInput, Prisma.SubCategoryUncheckedUpdateInput>
  /**
   * Choose, which SubCategory to update.
   */
  where: Prisma.SubCategoryWhereUniqueInput
}

/**
 * SubCategory updateMany
 */
export type SubCategoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SubCategories.
   */
  data: Prisma.XOR<Prisma.SubCategoryUpdateManyMutationInput, Prisma.SubCategoryUncheckedUpdateManyInput>
  /**
   * Filter which SubCategories to update
   */
  where?: Prisma.SubCategoryWhereInput
  /**
   * Limit how many SubCategories to update.
   */
  limit?: number
}

/**
 * SubCategory updateManyAndReturn
 */
export type SubCategoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * The data used to update SubCategories.
   */
  data: Prisma.XOR<Prisma.SubCategoryUpdateManyMutationInput, Prisma.SubCategoryUncheckedUpdateManyInput>
  /**
   * Filter which SubCategories to update
   */
  where?: Prisma.SubCategoryWhereInput
  /**
   * Limit how many SubCategories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SubCategory upsert
 */
export type SubCategoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * The filter to search for the SubCategory to update in case it exists.
   */
  where: Prisma.SubCategoryWhereUniqueInput
  /**
   * In case the SubCategory found by the `where` argument doesn't exist, create a new SubCategory with this data.
   */
  create: Prisma.XOR<Prisma.SubCategoryCreateInput, Prisma.SubCategoryUncheckedCreateInput>
  /**
   * In case the SubCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SubCategoryUpdateInput, Prisma.SubCategoryUncheckedUpdateInput>
}

/**
 * SubCategory delete
 */
export type SubCategoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
  /**
   * Filter which SubCategory to delete.
   */
  where: Prisma.SubCategoryWhereUniqueInput
}

/**
 * SubCategory deleteMany
 */
export type SubCategoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SubCategories to delete
   */
  where?: Prisma.SubCategoryWhereInput
  /**
   * Limit how many SubCategories to delete.
   */
  limit?: number
}

/**
 * SubCategory.foods
 */
export type SubCategory$foodsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  where?: Prisma.FoodWhereInput
  orderBy?: Prisma.FoodOrderByWithRelationInput | Prisma.FoodOrderByWithRelationInput[]
  cursor?: Prisma.FoodWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FoodScalarFieldEnum | Prisma.FoodScalarFieldEnum[]
}

/**
 * SubCategory without action
 */
export type SubCategoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubCategory
   */
  select?: Prisma.SubCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubCategory
   */
  omit?: Prisma.SubCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubCategoryInclude<ExtArgs> | null
}
