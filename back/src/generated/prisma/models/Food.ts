
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Food` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Food
 * 
 */
export type FoodModel = runtime.Types.Result.DefaultSelection<Prisma.$FoodPayload>

export type AggregateFood = {
  _count: FoodCountAggregateOutputType | null
  _avg: FoodAvgAggregateOutputType | null
  _sum: FoodSumAggregateOutputType | null
  _min: FoodMinAggregateOutputType | null
  _max: FoodMaxAggregateOutputType | null
}

export type FoodAvgAggregateOutputType = {
  price: number | null
  estimatedTimeMn: number | null
}

export type FoodSumAggregateOutputType = {
  price: number | null
  estimatedTimeMn: number | null
}

export type FoodMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  image: string | null
  subCategoryId: string | null
  price: number | null
  estimatedTimeMn: number | null
}

export type FoodMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  image: string | null
  subCategoryId: string | null
  price: number | null
  estimatedTimeMn: number | null
}

export type FoodCountAggregateOutputType = {
  id: number
  title: number
  description: number
  image: number
  subCategoryId: number
  price: number
  estimatedTimeMn: number
  _all: number
}


export type FoodAvgAggregateInputType = {
  price?: true
  estimatedTimeMn?: true
}

export type FoodSumAggregateInputType = {
  price?: true
  estimatedTimeMn?: true
}

export type FoodMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  image?: true
  subCategoryId?: true
  price?: true
  estimatedTimeMn?: true
}

export type FoodMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  image?: true
  subCategoryId?: true
  price?: true
  estimatedTimeMn?: true
}

export type FoodCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  image?: true
  subCategoryId?: true
  price?: true
  estimatedTimeMn?: true
  _all?: true
}

export type FoodAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Food to aggregate.
   */
  where?: Prisma.FoodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Foods to fetch.
   */
  orderBy?: Prisma.FoodOrderByWithRelationInput | Prisma.FoodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FoodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Foods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Foods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Foods
  **/
  _count?: true | FoodCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FoodAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FoodSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FoodMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FoodMaxAggregateInputType
}

export type GetFoodAggregateType<T extends FoodAggregateArgs> = {
      [P in keyof T & keyof AggregateFood]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFood[P]>
    : Prisma.GetScalarType<T[P], AggregateFood[P]>
}




export type FoodGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FoodWhereInput
  orderBy?: Prisma.FoodOrderByWithAggregationInput | Prisma.FoodOrderByWithAggregationInput[]
  by: Prisma.FoodScalarFieldEnum[] | Prisma.FoodScalarFieldEnum
  having?: Prisma.FoodScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FoodCountAggregateInputType | true
  _avg?: FoodAvgAggregateInputType
  _sum?: FoodSumAggregateInputType
  _min?: FoodMinAggregateInputType
  _max?: FoodMaxAggregateInputType
}

export type FoodGroupByOutputType = {
  id: string
  title: string
  description: string
  image: string
  subCategoryId: string
  price: number
  estimatedTimeMn: number
  _count: FoodCountAggregateOutputType | null
  _avg: FoodAvgAggregateOutputType | null
  _sum: FoodSumAggregateOutputType | null
  _min: FoodMinAggregateOutputType | null
  _max: FoodMaxAggregateOutputType | null
}

type GetFoodGroupByPayload<T extends FoodGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FoodGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FoodGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FoodGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FoodGroupByOutputType[P]>
      }
    >
  > 



export type FoodWhereInput = {
  AND?: Prisma.FoodWhereInput | Prisma.FoodWhereInput[]
  OR?: Prisma.FoodWhereInput[]
  NOT?: Prisma.FoodWhereInput | Prisma.FoodWhereInput[]
  id?: Prisma.StringFilter<"Food"> | string
  title?: Prisma.StringFilter<"Food"> | string
  description?: Prisma.StringFilter<"Food"> | string
  image?: Prisma.StringFilter<"Food"> | string
  subCategoryId?: Prisma.StringFilter<"Food"> | string
  price?: Prisma.FloatFilter<"Food"> | number
  estimatedTimeMn?: Prisma.IntFilter<"Food"> | number
  subCategory?: Prisma.XOR<Prisma.SubCategoryScalarRelationFilter, Prisma.SubCategoryWhereInput>
  ingredients?: Prisma.IngredientListRelationFilter
  orderItem?: Prisma.OrderItemListRelationFilter
}

export type FoodOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  image?: Prisma.SortOrder
  subCategoryId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  estimatedTimeMn?: Prisma.SortOrder
  subCategory?: Prisma.SubCategoryOrderByWithRelationInput
  ingredients?: Prisma.IngredientOrderByRelationAggregateInput
  orderItem?: Prisma.OrderItemOrderByRelationAggregateInput
}

export type FoodWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  title?: string
  AND?: Prisma.FoodWhereInput | Prisma.FoodWhereInput[]
  OR?: Prisma.FoodWhereInput[]
  NOT?: Prisma.FoodWhereInput | Prisma.FoodWhereInput[]
  description?: Prisma.StringFilter<"Food"> | string
  image?: Prisma.StringFilter<"Food"> | string
  subCategoryId?: Prisma.StringFilter<"Food"> | string
  price?: Prisma.FloatFilter<"Food"> | number
  estimatedTimeMn?: Prisma.IntFilter<"Food"> | number
  subCategory?: Prisma.XOR<Prisma.SubCategoryScalarRelationFilter, Prisma.SubCategoryWhereInput>
  ingredients?: Prisma.IngredientListRelationFilter
  orderItem?: Prisma.OrderItemListRelationFilter
}, "id" | "title">

export type FoodOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  image?: Prisma.SortOrder
  subCategoryId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  estimatedTimeMn?: Prisma.SortOrder
  _count?: Prisma.FoodCountOrderByAggregateInput
  _avg?: Prisma.FoodAvgOrderByAggregateInput
  _max?: Prisma.FoodMaxOrderByAggregateInput
  _min?: Prisma.FoodMinOrderByAggregateInput
  _sum?: Prisma.FoodSumOrderByAggregateInput
}

export type FoodScalarWhereWithAggregatesInput = {
  AND?: Prisma.FoodScalarWhereWithAggregatesInput | Prisma.FoodScalarWhereWithAggregatesInput[]
  OR?: Prisma.FoodScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FoodScalarWhereWithAggregatesInput | Prisma.FoodScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Food"> | string
  title?: Prisma.StringWithAggregatesFilter<"Food"> | string
  description?: Prisma.StringWithAggregatesFilter<"Food"> | string
  image?: Prisma.StringWithAggregatesFilter<"Food"> | string
  subCategoryId?: Prisma.StringWithAggregatesFilter<"Food"> | string
  price?: Prisma.FloatWithAggregatesFilter<"Food"> | number
  estimatedTimeMn?: Prisma.IntWithAggregatesFilter<"Food"> | number
}

export type FoodCreateInput = {
  id?: string
  title: string
  description: string
  image: string
  price: number
  estimatedTimeMn: number
  subCategory: Prisma.SubCategoryCreateNestedOneWithoutFoodsInput
  ingredients?: Prisma.IngredientCreateNestedManyWithoutFoodsInput
  orderItem?: Prisma.OrderItemCreateNestedManyWithoutFoodInput
}

export type FoodUncheckedCreateInput = {
  id?: string
  title: string
  description: string
  image: string
  subCategoryId: string
  price: number
  estimatedTimeMn: number
  ingredients?: Prisma.IngredientUncheckedCreateNestedManyWithoutFoodsInput
  orderItem?: Prisma.OrderItemUncheckedCreateNestedManyWithoutFoodInput
}

export type FoodUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
  subCategory?: Prisma.SubCategoryUpdateOneRequiredWithoutFoodsNestedInput
  ingredients?: Prisma.IngredientUpdateManyWithoutFoodsNestedInput
  orderItem?: Prisma.OrderItemUpdateManyWithoutFoodNestedInput
}

export type FoodUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  subCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
  ingredients?: Prisma.IngredientUncheckedUpdateManyWithoutFoodsNestedInput
  orderItem?: Prisma.OrderItemUncheckedUpdateManyWithoutFoodNestedInput
}

export type FoodCreateManyInput = {
  id?: string
  title: string
  description: string
  image: string
  subCategoryId: string
  price: number
  estimatedTimeMn: number
}

export type FoodUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FoodUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  subCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FoodListRelationFilter = {
  every?: Prisma.FoodWhereInput
  some?: Prisma.FoodWhereInput
  none?: Prisma.FoodWhereInput
}

export type FoodOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FoodCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  image?: Prisma.SortOrder
  subCategoryId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  estimatedTimeMn?: Prisma.SortOrder
}

export type FoodAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
  estimatedTimeMn?: Prisma.SortOrder
}

export type FoodMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  image?: Prisma.SortOrder
  subCategoryId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  estimatedTimeMn?: Prisma.SortOrder
}

export type FoodMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  image?: Prisma.SortOrder
  subCategoryId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  estimatedTimeMn?: Prisma.SortOrder
}

export type FoodSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
  estimatedTimeMn?: Prisma.SortOrder
}

export type FoodScalarRelationFilter = {
  is?: Prisma.FoodWhereInput
  isNot?: Prisma.FoodWhereInput
}

export type FoodCreateNestedManyWithoutSubCategoryInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutSubCategoryInput, Prisma.FoodUncheckedCreateWithoutSubCategoryInput> | Prisma.FoodCreateWithoutSubCategoryInput[] | Prisma.FoodUncheckedCreateWithoutSubCategoryInput[]
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutSubCategoryInput | Prisma.FoodCreateOrConnectWithoutSubCategoryInput[]
  createMany?: Prisma.FoodCreateManySubCategoryInputEnvelope
  connect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
}

export type FoodUncheckedCreateNestedManyWithoutSubCategoryInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutSubCategoryInput, Prisma.FoodUncheckedCreateWithoutSubCategoryInput> | Prisma.FoodCreateWithoutSubCategoryInput[] | Prisma.FoodUncheckedCreateWithoutSubCategoryInput[]
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutSubCategoryInput | Prisma.FoodCreateOrConnectWithoutSubCategoryInput[]
  createMany?: Prisma.FoodCreateManySubCategoryInputEnvelope
  connect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
}

export type FoodUpdateManyWithoutSubCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutSubCategoryInput, Prisma.FoodUncheckedCreateWithoutSubCategoryInput> | Prisma.FoodCreateWithoutSubCategoryInput[] | Prisma.FoodUncheckedCreateWithoutSubCategoryInput[]
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutSubCategoryInput | Prisma.FoodCreateOrConnectWithoutSubCategoryInput[]
  upsert?: Prisma.FoodUpsertWithWhereUniqueWithoutSubCategoryInput | Prisma.FoodUpsertWithWhereUniqueWithoutSubCategoryInput[]
  createMany?: Prisma.FoodCreateManySubCategoryInputEnvelope
  set?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  disconnect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  delete?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  connect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  update?: Prisma.FoodUpdateWithWhereUniqueWithoutSubCategoryInput | Prisma.FoodUpdateWithWhereUniqueWithoutSubCategoryInput[]
  updateMany?: Prisma.FoodUpdateManyWithWhereWithoutSubCategoryInput | Prisma.FoodUpdateManyWithWhereWithoutSubCategoryInput[]
  deleteMany?: Prisma.FoodScalarWhereInput | Prisma.FoodScalarWhereInput[]
}

export type FoodUncheckedUpdateManyWithoutSubCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutSubCategoryInput, Prisma.FoodUncheckedCreateWithoutSubCategoryInput> | Prisma.FoodCreateWithoutSubCategoryInput[] | Prisma.FoodUncheckedCreateWithoutSubCategoryInput[]
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutSubCategoryInput | Prisma.FoodCreateOrConnectWithoutSubCategoryInput[]
  upsert?: Prisma.FoodUpsertWithWhereUniqueWithoutSubCategoryInput | Prisma.FoodUpsertWithWhereUniqueWithoutSubCategoryInput[]
  createMany?: Prisma.FoodCreateManySubCategoryInputEnvelope
  set?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  disconnect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  delete?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  connect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  update?: Prisma.FoodUpdateWithWhereUniqueWithoutSubCategoryInput | Prisma.FoodUpdateWithWhereUniqueWithoutSubCategoryInput[]
  updateMany?: Prisma.FoodUpdateManyWithWhereWithoutSubCategoryInput | Prisma.FoodUpdateManyWithWhereWithoutSubCategoryInput[]
  deleteMany?: Prisma.FoodScalarWhereInput | Prisma.FoodScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type FoodCreateNestedManyWithoutIngredientsInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutIngredientsInput, Prisma.FoodUncheckedCreateWithoutIngredientsInput> | Prisma.FoodCreateWithoutIngredientsInput[] | Prisma.FoodUncheckedCreateWithoutIngredientsInput[]
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutIngredientsInput | Prisma.FoodCreateOrConnectWithoutIngredientsInput[]
  connect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
}

export type FoodUncheckedCreateNestedManyWithoutIngredientsInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutIngredientsInput, Prisma.FoodUncheckedCreateWithoutIngredientsInput> | Prisma.FoodCreateWithoutIngredientsInput[] | Prisma.FoodUncheckedCreateWithoutIngredientsInput[]
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutIngredientsInput | Prisma.FoodCreateOrConnectWithoutIngredientsInput[]
  connect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
}

export type FoodUpdateManyWithoutIngredientsNestedInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutIngredientsInput, Prisma.FoodUncheckedCreateWithoutIngredientsInput> | Prisma.FoodCreateWithoutIngredientsInput[] | Prisma.FoodUncheckedCreateWithoutIngredientsInput[]
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutIngredientsInput | Prisma.FoodCreateOrConnectWithoutIngredientsInput[]
  upsert?: Prisma.FoodUpsertWithWhereUniqueWithoutIngredientsInput | Prisma.FoodUpsertWithWhereUniqueWithoutIngredientsInput[]
  set?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  disconnect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  delete?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  connect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  update?: Prisma.FoodUpdateWithWhereUniqueWithoutIngredientsInput | Prisma.FoodUpdateWithWhereUniqueWithoutIngredientsInput[]
  updateMany?: Prisma.FoodUpdateManyWithWhereWithoutIngredientsInput | Prisma.FoodUpdateManyWithWhereWithoutIngredientsInput[]
  deleteMany?: Prisma.FoodScalarWhereInput | Prisma.FoodScalarWhereInput[]
}

export type FoodUncheckedUpdateManyWithoutIngredientsNestedInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutIngredientsInput, Prisma.FoodUncheckedCreateWithoutIngredientsInput> | Prisma.FoodCreateWithoutIngredientsInput[] | Prisma.FoodUncheckedCreateWithoutIngredientsInput[]
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutIngredientsInput | Prisma.FoodCreateOrConnectWithoutIngredientsInput[]
  upsert?: Prisma.FoodUpsertWithWhereUniqueWithoutIngredientsInput | Prisma.FoodUpsertWithWhereUniqueWithoutIngredientsInput[]
  set?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  disconnect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  delete?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  connect?: Prisma.FoodWhereUniqueInput | Prisma.FoodWhereUniqueInput[]
  update?: Prisma.FoodUpdateWithWhereUniqueWithoutIngredientsInput | Prisma.FoodUpdateWithWhereUniqueWithoutIngredientsInput[]
  updateMany?: Prisma.FoodUpdateManyWithWhereWithoutIngredientsInput | Prisma.FoodUpdateManyWithWhereWithoutIngredientsInput[]
  deleteMany?: Prisma.FoodScalarWhereInput | Prisma.FoodScalarWhereInput[]
}

export type FoodCreateNestedOneWithoutOrderItemInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutOrderItemInput, Prisma.FoodUncheckedCreateWithoutOrderItemInput>
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutOrderItemInput
  connect?: Prisma.FoodWhereUniqueInput
}

export type FoodUpdateOneRequiredWithoutOrderItemNestedInput = {
  create?: Prisma.XOR<Prisma.FoodCreateWithoutOrderItemInput, Prisma.FoodUncheckedCreateWithoutOrderItemInput>
  connectOrCreate?: Prisma.FoodCreateOrConnectWithoutOrderItemInput
  upsert?: Prisma.FoodUpsertWithoutOrderItemInput
  connect?: Prisma.FoodWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FoodUpdateToOneWithWhereWithoutOrderItemInput, Prisma.FoodUpdateWithoutOrderItemInput>, Prisma.FoodUncheckedUpdateWithoutOrderItemInput>
}

export type FoodCreateWithoutSubCategoryInput = {
  id?: string
  title: string
  description: string
  image: string
  price: number
  estimatedTimeMn: number
  ingredients?: Prisma.IngredientCreateNestedManyWithoutFoodsInput
  orderItem?: Prisma.OrderItemCreateNestedManyWithoutFoodInput
}

export type FoodUncheckedCreateWithoutSubCategoryInput = {
  id?: string
  title: string
  description: string
  image: string
  price: number
  estimatedTimeMn: number
  ingredients?: Prisma.IngredientUncheckedCreateNestedManyWithoutFoodsInput
  orderItem?: Prisma.OrderItemUncheckedCreateNestedManyWithoutFoodInput
}

export type FoodCreateOrConnectWithoutSubCategoryInput = {
  where: Prisma.FoodWhereUniqueInput
  create: Prisma.XOR<Prisma.FoodCreateWithoutSubCategoryInput, Prisma.FoodUncheckedCreateWithoutSubCategoryInput>
}

export type FoodCreateManySubCategoryInputEnvelope = {
  data: Prisma.FoodCreateManySubCategoryInput | Prisma.FoodCreateManySubCategoryInput[]
  skipDuplicates?: boolean
}

export type FoodUpsertWithWhereUniqueWithoutSubCategoryInput = {
  where: Prisma.FoodWhereUniqueInput
  update: Prisma.XOR<Prisma.FoodUpdateWithoutSubCategoryInput, Prisma.FoodUncheckedUpdateWithoutSubCategoryInput>
  create: Prisma.XOR<Prisma.FoodCreateWithoutSubCategoryInput, Prisma.FoodUncheckedCreateWithoutSubCategoryInput>
}

export type FoodUpdateWithWhereUniqueWithoutSubCategoryInput = {
  where: Prisma.FoodWhereUniqueInput
  data: Prisma.XOR<Prisma.FoodUpdateWithoutSubCategoryInput, Prisma.FoodUncheckedUpdateWithoutSubCategoryInput>
}

export type FoodUpdateManyWithWhereWithoutSubCategoryInput = {
  where: Prisma.FoodScalarWhereInput
  data: Prisma.XOR<Prisma.FoodUpdateManyMutationInput, Prisma.FoodUncheckedUpdateManyWithoutSubCategoryInput>
}

export type FoodScalarWhereInput = {
  AND?: Prisma.FoodScalarWhereInput | Prisma.FoodScalarWhereInput[]
  OR?: Prisma.FoodScalarWhereInput[]
  NOT?: Prisma.FoodScalarWhereInput | Prisma.FoodScalarWhereInput[]
  id?: Prisma.StringFilter<"Food"> | string
  title?: Prisma.StringFilter<"Food"> | string
  description?: Prisma.StringFilter<"Food"> | string
  image?: Prisma.StringFilter<"Food"> | string
  subCategoryId?: Prisma.StringFilter<"Food"> | string
  price?: Prisma.FloatFilter<"Food"> | number
  estimatedTimeMn?: Prisma.IntFilter<"Food"> | number
}

export type FoodCreateWithoutIngredientsInput = {
  id?: string
  title: string
  description: string
  image: string
  price: number
  estimatedTimeMn: number
  subCategory: Prisma.SubCategoryCreateNestedOneWithoutFoodsInput
  orderItem?: Prisma.OrderItemCreateNestedManyWithoutFoodInput
}

export type FoodUncheckedCreateWithoutIngredientsInput = {
  id?: string
  title: string
  description: string
  image: string
  subCategoryId: string
  price: number
  estimatedTimeMn: number
  orderItem?: Prisma.OrderItemUncheckedCreateNestedManyWithoutFoodInput
}

export type FoodCreateOrConnectWithoutIngredientsInput = {
  where: Prisma.FoodWhereUniqueInput
  create: Prisma.XOR<Prisma.FoodCreateWithoutIngredientsInput, Prisma.FoodUncheckedCreateWithoutIngredientsInput>
}

export type FoodUpsertWithWhereUniqueWithoutIngredientsInput = {
  where: Prisma.FoodWhereUniqueInput
  update: Prisma.XOR<Prisma.FoodUpdateWithoutIngredientsInput, Prisma.FoodUncheckedUpdateWithoutIngredientsInput>
  create: Prisma.XOR<Prisma.FoodCreateWithoutIngredientsInput, Prisma.FoodUncheckedCreateWithoutIngredientsInput>
}

export type FoodUpdateWithWhereUniqueWithoutIngredientsInput = {
  where: Prisma.FoodWhereUniqueInput
  data: Prisma.XOR<Prisma.FoodUpdateWithoutIngredientsInput, Prisma.FoodUncheckedUpdateWithoutIngredientsInput>
}

export type FoodUpdateManyWithWhereWithoutIngredientsInput = {
  where: Prisma.FoodScalarWhereInput
  data: Prisma.XOR<Prisma.FoodUpdateManyMutationInput, Prisma.FoodUncheckedUpdateManyWithoutIngredientsInput>
}

export type FoodCreateWithoutOrderItemInput = {
  id?: string
  title: string
  description: string
  image: string
  price: number
  estimatedTimeMn: number
  subCategory: Prisma.SubCategoryCreateNestedOneWithoutFoodsInput
  ingredients?: Prisma.IngredientCreateNestedManyWithoutFoodsInput
}

export type FoodUncheckedCreateWithoutOrderItemInput = {
  id?: string
  title: string
  description: string
  image: string
  subCategoryId: string
  price: number
  estimatedTimeMn: number
  ingredients?: Prisma.IngredientUncheckedCreateNestedManyWithoutFoodsInput
}

export type FoodCreateOrConnectWithoutOrderItemInput = {
  where: Prisma.FoodWhereUniqueInput
  create: Prisma.XOR<Prisma.FoodCreateWithoutOrderItemInput, Prisma.FoodUncheckedCreateWithoutOrderItemInput>
}

export type FoodUpsertWithoutOrderItemInput = {
  update: Prisma.XOR<Prisma.FoodUpdateWithoutOrderItemInput, Prisma.FoodUncheckedUpdateWithoutOrderItemInput>
  create: Prisma.XOR<Prisma.FoodCreateWithoutOrderItemInput, Prisma.FoodUncheckedCreateWithoutOrderItemInput>
  where?: Prisma.FoodWhereInput
}

export type FoodUpdateToOneWithWhereWithoutOrderItemInput = {
  where?: Prisma.FoodWhereInput
  data: Prisma.XOR<Prisma.FoodUpdateWithoutOrderItemInput, Prisma.FoodUncheckedUpdateWithoutOrderItemInput>
}

export type FoodUpdateWithoutOrderItemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
  subCategory?: Prisma.SubCategoryUpdateOneRequiredWithoutFoodsNestedInput
  ingredients?: Prisma.IngredientUpdateManyWithoutFoodsNestedInput
}

export type FoodUncheckedUpdateWithoutOrderItemInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  subCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
  ingredients?: Prisma.IngredientUncheckedUpdateManyWithoutFoodsNestedInput
}

export type FoodCreateManySubCategoryInput = {
  id?: string
  title: string
  description: string
  image: string
  price: number
  estimatedTimeMn: number
}

export type FoodUpdateWithoutSubCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
  ingredients?: Prisma.IngredientUpdateManyWithoutFoodsNestedInput
  orderItem?: Prisma.OrderItemUpdateManyWithoutFoodNestedInput
}

export type FoodUncheckedUpdateWithoutSubCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
  ingredients?: Prisma.IngredientUncheckedUpdateManyWithoutFoodsNestedInput
  orderItem?: Prisma.OrderItemUncheckedUpdateManyWithoutFoodNestedInput
}

export type FoodUncheckedUpdateManyWithoutSubCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FoodUpdateWithoutIngredientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
  subCategory?: Prisma.SubCategoryUpdateOneRequiredWithoutFoodsNestedInput
  orderItem?: Prisma.OrderItemUpdateManyWithoutFoodNestedInput
}

export type FoodUncheckedUpdateWithoutIngredientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  subCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
  orderItem?: Prisma.OrderItemUncheckedUpdateManyWithoutFoodNestedInput
}

export type FoodUncheckedUpdateManyWithoutIngredientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  subCategoryId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  estimatedTimeMn?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type FoodCountOutputType
 */

export type FoodCountOutputType = {
  ingredients: number
  orderItem: number
}

export type FoodCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ingredients?: boolean | FoodCountOutputTypeCountIngredientsArgs
  orderItem?: boolean | FoodCountOutputTypeCountOrderItemArgs
}

/**
 * FoodCountOutputType without action
 */
export type FoodCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FoodCountOutputType
   */
  select?: Prisma.FoodCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FoodCountOutputType without action
 */
export type FoodCountOutputTypeCountIngredientsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IngredientWhereInput
}

/**
 * FoodCountOutputType without action
 */
export type FoodCountOutputTypeCountOrderItemArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderItemWhereInput
}


export type FoodSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  image?: boolean
  subCategoryId?: boolean
  price?: boolean
  estimatedTimeMn?: boolean
  subCategory?: boolean | Prisma.SubCategoryDefaultArgs<ExtArgs>
  ingredients?: boolean | Prisma.Food$ingredientsArgs<ExtArgs>
  orderItem?: boolean | Prisma.Food$orderItemArgs<ExtArgs>
  _count?: boolean | Prisma.FoodCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["food"]>

export type FoodSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  image?: boolean
  subCategoryId?: boolean
  price?: boolean
  estimatedTimeMn?: boolean
  subCategory?: boolean | Prisma.SubCategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["food"]>

export type FoodSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  image?: boolean
  subCategoryId?: boolean
  price?: boolean
  estimatedTimeMn?: boolean
  subCategory?: boolean | Prisma.SubCategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["food"]>

export type FoodSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  image?: boolean
  subCategoryId?: boolean
  price?: boolean
  estimatedTimeMn?: boolean
}

export type FoodOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "image" | "subCategoryId" | "price" | "estimatedTimeMn", ExtArgs["result"]["food"]>
export type FoodInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  subCategory?: boolean | Prisma.SubCategoryDefaultArgs<ExtArgs>
  ingredients?: boolean | Prisma.Food$ingredientsArgs<ExtArgs>
  orderItem?: boolean | Prisma.Food$orderItemArgs<ExtArgs>
  _count?: boolean | Prisma.FoodCountOutputTypeDefaultArgs<ExtArgs>
}
export type FoodIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  subCategory?: boolean | Prisma.SubCategoryDefaultArgs<ExtArgs>
}
export type FoodIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  subCategory?: boolean | Prisma.SubCategoryDefaultArgs<ExtArgs>
}

export type $FoodPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Food"
  objects: {
    subCategory: Prisma.$SubCategoryPayload<ExtArgs>
    ingredients: Prisma.$IngredientPayload<ExtArgs>[]
    orderItem: Prisma.$OrderItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string
    image: string
    subCategoryId: string
    price: number
    estimatedTimeMn: number
  }, ExtArgs["result"]["food"]>
  composites: {}
}

export type FoodGetPayload<S extends boolean | null | undefined | FoodDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FoodPayload, S>

export type FoodCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FoodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FoodCountAggregateInputType | true
  }

export interface FoodDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Food'], meta: { name: 'Food' } }
  /**
   * Find zero or one Food that matches the filter.
   * @param {FoodFindUniqueArgs} args - Arguments to find a Food
   * @example
   * // Get one Food
   * const food = await prisma.food.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FoodFindUniqueArgs>(args: Prisma.SelectSubset<T, FoodFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FoodClient<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Food that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FoodFindUniqueOrThrowArgs} args - Arguments to find a Food
   * @example
   * // Get one Food
   * const food = await prisma.food.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FoodFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FoodFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FoodClient<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Food that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FoodFindFirstArgs} args - Arguments to find a Food
   * @example
   * // Get one Food
   * const food = await prisma.food.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FoodFindFirstArgs>(args?: Prisma.SelectSubset<T, FoodFindFirstArgs<ExtArgs>>): Prisma.Prisma__FoodClient<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Food that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FoodFindFirstOrThrowArgs} args - Arguments to find a Food
   * @example
   * // Get one Food
   * const food = await prisma.food.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FoodFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FoodFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FoodClient<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Foods that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FoodFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Foods
   * const foods = await prisma.food.findMany()
   * 
   * // Get first 10 Foods
   * const foods = await prisma.food.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const foodWithIdOnly = await prisma.food.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FoodFindManyArgs>(args?: Prisma.SelectSubset<T, FoodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Food.
   * @param {FoodCreateArgs} args - Arguments to create a Food.
   * @example
   * // Create one Food
   * const Food = await prisma.food.create({
   *   data: {
   *     // ... data to create a Food
   *   }
   * })
   * 
   */
  create<T extends FoodCreateArgs>(args: Prisma.SelectSubset<T, FoodCreateArgs<ExtArgs>>): Prisma.Prisma__FoodClient<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Foods.
   * @param {FoodCreateManyArgs} args - Arguments to create many Foods.
   * @example
   * // Create many Foods
   * const food = await prisma.food.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FoodCreateManyArgs>(args?: Prisma.SelectSubset<T, FoodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Foods and returns the data saved in the database.
   * @param {FoodCreateManyAndReturnArgs} args - Arguments to create many Foods.
   * @example
   * // Create many Foods
   * const food = await prisma.food.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Foods and only return the `id`
   * const foodWithIdOnly = await prisma.food.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FoodCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FoodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Food.
   * @param {FoodDeleteArgs} args - Arguments to delete one Food.
   * @example
   * // Delete one Food
   * const Food = await prisma.food.delete({
   *   where: {
   *     // ... filter to delete one Food
   *   }
   * })
   * 
   */
  delete<T extends FoodDeleteArgs>(args: Prisma.SelectSubset<T, FoodDeleteArgs<ExtArgs>>): Prisma.Prisma__FoodClient<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Food.
   * @param {FoodUpdateArgs} args - Arguments to update one Food.
   * @example
   * // Update one Food
   * const food = await prisma.food.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FoodUpdateArgs>(args: Prisma.SelectSubset<T, FoodUpdateArgs<ExtArgs>>): Prisma.Prisma__FoodClient<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Foods.
   * @param {FoodDeleteManyArgs} args - Arguments to filter Foods to delete.
   * @example
   * // Delete a few Foods
   * const { count } = await prisma.food.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FoodDeleteManyArgs>(args?: Prisma.SelectSubset<T, FoodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Foods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FoodUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Foods
   * const food = await prisma.food.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FoodUpdateManyArgs>(args: Prisma.SelectSubset<T, FoodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Foods and returns the data updated in the database.
   * @param {FoodUpdateManyAndReturnArgs} args - Arguments to update many Foods.
   * @example
   * // Update many Foods
   * const food = await prisma.food.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Foods and only return the `id`
   * const foodWithIdOnly = await prisma.food.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FoodUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FoodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Food.
   * @param {FoodUpsertArgs} args - Arguments to update or create a Food.
   * @example
   * // Update or create a Food
   * const food = await prisma.food.upsert({
   *   create: {
   *     // ... data to create a Food
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Food we want to update
   *   }
   * })
   */
  upsert<T extends FoodUpsertArgs>(args: Prisma.SelectSubset<T, FoodUpsertArgs<ExtArgs>>): Prisma.Prisma__FoodClient<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Foods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FoodCountArgs} args - Arguments to filter Foods to count.
   * @example
   * // Count the number of Foods
   * const count = await prisma.food.count({
   *   where: {
   *     // ... the filter for the Foods we want to count
   *   }
   * })
  **/
  count<T extends FoodCountArgs>(
    args?: Prisma.Subset<T, FoodCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FoodCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Food.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FoodAggregateArgs>(args: Prisma.Subset<T, FoodAggregateArgs>): Prisma.PrismaPromise<GetFoodAggregateType<T>>

  /**
   * Group by Food.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FoodGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FoodGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FoodGroupByArgs['orderBy'] }
      : { orderBy?: FoodGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Food model
 */
readonly fields: FoodFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Food.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FoodClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  subCategory<T extends Prisma.SubCategoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SubCategoryDefaultArgs<ExtArgs>>): Prisma.Prisma__SubCategoryClient<runtime.Types.Result.GetResult<Prisma.$SubCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  ingredients<T extends Prisma.Food$ingredientsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Food$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  orderItem<T extends Prisma.Food$orderItemArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Food$orderItemArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Food model
 */
export interface FoodFieldRefs {
  readonly id: Prisma.FieldRef<"Food", 'String'>
  readonly title: Prisma.FieldRef<"Food", 'String'>
  readonly description: Prisma.FieldRef<"Food", 'String'>
  readonly image: Prisma.FieldRef<"Food", 'String'>
  readonly subCategoryId: Prisma.FieldRef<"Food", 'String'>
  readonly price: Prisma.FieldRef<"Food", 'Float'>
  readonly estimatedTimeMn: Prisma.FieldRef<"Food", 'Int'>
}
    

// Custom InputTypes
/**
 * Food findUnique
 */
export type FoodFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * Filter, which Food to fetch.
   */
  where: Prisma.FoodWhereUniqueInput
}

/**
 * Food findUniqueOrThrow
 */
export type FoodFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * Filter, which Food to fetch.
   */
  where: Prisma.FoodWhereUniqueInput
}

/**
 * Food findFirst
 */
export type FoodFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * Filter, which Food to fetch.
   */
  where?: Prisma.FoodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Foods to fetch.
   */
  orderBy?: Prisma.FoodOrderByWithRelationInput | Prisma.FoodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Foods.
   */
  cursor?: Prisma.FoodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Foods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Foods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Foods.
   */
  distinct?: Prisma.FoodScalarFieldEnum | Prisma.FoodScalarFieldEnum[]
}

/**
 * Food findFirstOrThrow
 */
export type FoodFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * Filter, which Food to fetch.
   */
  where?: Prisma.FoodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Foods to fetch.
   */
  orderBy?: Prisma.FoodOrderByWithRelationInput | Prisma.FoodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Foods.
   */
  cursor?: Prisma.FoodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Foods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Foods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Foods.
   */
  distinct?: Prisma.FoodScalarFieldEnum | Prisma.FoodScalarFieldEnum[]
}

/**
 * Food findMany
 */
export type FoodFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * Filter, which Foods to fetch.
   */
  where?: Prisma.FoodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Foods to fetch.
   */
  orderBy?: Prisma.FoodOrderByWithRelationInput | Prisma.FoodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Foods.
   */
  cursor?: Prisma.FoodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Foods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Foods.
   */
  skip?: number
  distinct?: Prisma.FoodScalarFieldEnum | Prisma.FoodScalarFieldEnum[]
}

/**
 * Food create
 */
export type FoodCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * The data needed to create a Food.
   */
  data: Prisma.XOR<Prisma.FoodCreateInput, Prisma.FoodUncheckedCreateInput>
}

/**
 * Food createMany
 */
export type FoodCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Foods.
   */
  data: Prisma.FoodCreateManyInput | Prisma.FoodCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Food createManyAndReturn
 */
export type FoodCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * The data used to create many Foods.
   */
  data: Prisma.FoodCreateManyInput | Prisma.FoodCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Food update
 */
export type FoodUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * The data needed to update a Food.
   */
  data: Prisma.XOR<Prisma.FoodUpdateInput, Prisma.FoodUncheckedUpdateInput>
  /**
   * Choose, which Food to update.
   */
  where: Prisma.FoodWhereUniqueInput
}

/**
 * Food updateMany
 */
export type FoodUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Foods.
   */
  data: Prisma.XOR<Prisma.FoodUpdateManyMutationInput, Prisma.FoodUncheckedUpdateManyInput>
  /**
   * Filter which Foods to update
   */
  where?: Prisma.FoodWhereInput
  /**
   * Limit how many Foods to update.
   */
  limit?: number
}

/**
 * Food updateManyAndReturn
 */
export type FoodUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * The data used to update Foods.
   */
  data: Prisma.XOR<Prisma.FoodUpdateManyMutationInput, Prisma.FoodUncheckedUpdateManyInput>
  /**
   * Filter which Foods to update
   */
  where?: Prisma.FoodWhereInput
  /**
   * Limit how many Foods to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Food upsert
 */
export type FoodUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * The filter to search for the Food to update in case it exists.
   */
  where: Prisma.FoodWhereUniqueInput
  /**
   * In case the Food found by the `where` argument doesn't exist, create a new Food with this data.
   */
  create: Prisma.XOR<Prisma.FoodCreateInput, Prisma.FoodUncheckedCreateInput>
  /**
   * In case the Food was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FoodUpdateInput, Prisma.FoodUncheckedUpdateInput>
}

/**
 * Food delete
 */
export type FoodDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  /**
   * Filter which Food to delete.
   */
  where: Prisma.FoodWhereUniqueInput
}

/**
 * Food deleteMany
 */
export type FoodDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Foods to delete
   */
  where?: Prisma.FoodWhereInput
  /**
   * Limit how many Foods to delete.
   */
  limit?: number
}

/**
 * Food.ingredients
 */
export type Food$ingredientsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  where?: Prisma.IngredientWhereInput
  orderBy?: Prisma.IngredientOrderByWithRelationInput | Prisma.IngredientOrderByWithRelationInput[]
  cursor?: Prisma.IngredientWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.IngredientScalarFieldEnum | Prisma.IngredientScalarFieldEnum[]
}

/**
 * Food.orderItem
 */
export type Food$orderItemArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderItem
   */
  select?: Prisma.OrderItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderItem
   */
  omit?: Prisma.OrderItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderItemInclude<ExtArgs> | null
  where?: Prisma.OrderItemWhereInput
  orderBy?: Prisma.OrderItemOrderByWithRelationInput | Prisma.OrderItemOrderByWithRelationInput[]
  cursor?: Prisma.OrderItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderItemScalarFieldEnum | Prisma.OrderItemScalarFieldEnum[]
}

/**
 * Food without action
 */
export type FoodDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
}
