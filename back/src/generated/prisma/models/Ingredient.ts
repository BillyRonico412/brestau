
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Ingredient` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Ingredient
 * 
 */
export type IngredientModel = runtime.Types.Result.DefaultSelection<Prisma.$IngredientPayload>

export type AggregateIngredient = {
  _count: IngredientCountAggregateOutputType | null
  _min: IngredientMinAggregateOutputType | null
  _max: IngredientMaxAggregateOutputType | null
}

export type IngredientMinAggregateOutputType = {
  id: string | null
  title: string | null
  vegetarian: boolean | null
  halal: boolean | null
  noGluten: boolean | null
  noLactose: boolean | null
}

export type IngredientMaxAggregateOutputType = {
  id: string | null
  title: string | null
  vegetarian: boolean | null
  halal: boolean | null
  noGluten: boolean | null
  noLactose: boolean | null
}

export type IngredientCountAggregateOutputType = {
  id: number
  title: number
  vegetarian: number
  halal: number
  noGluten: number
  noLactose: number
  _all: number
}


export type IngredientMinAggregateInputType = {
  id?: true
  title?: true
  vegetarian?: true
  halal?: true
  noGluten?: true
  noLactose?: true
}

export type IngredientMaxAggregateInputType = {
  id?: true
  title?: true
  vegetarian?: true
  halal?: true
  noGluten?: true
  noLactose?: true
}

export type IngredientCountAggregateInputType = {
  id?: true
  title?: true
  vegetarian?: true
  halal?: true
  noGluten?: true
  noLactose?: true
  _all?: true
}

export type IngredientAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ingredient to aggregate.
   */
  where?: Prisma.IngredientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ingredients to fetch.
   */
  orderBy?: Prisma.IngredientOrderByWithRelationInput | Prisma.IngredientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IngredientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ingredients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ingredients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Ingredients
  **/
  _count?: true | IngredientCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IngredientMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IngredientMaxAggregateInputType
}

export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
      [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIngredient[P]>
    : Prisma.GetScalarType<T[P], AggregateIngredient[P]>
}




export type IngredientGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IngredientWhereInput
  orderBy?: Prisma.IngredientOrderByWithAggregationInput | Prisma.IngredientOrderByWithAggregationInput[]
  by: Prisma.IngredientScalarFieldEnum[] | Prisma.IngredientScalarFieldEnum
  having?: Prisma.IngredientScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IngredientCountAggregateInputType | true
  _min?: IngredientMinAggregateInputType
  _max?: IngredientMaxAggregateInputType
}

export type IngredientGroupByOutputType = {
  id: string
  title: string
  vegetarian: boolean
  halal: boolean
  noGluten: boolean
  noLactose: boolean
  _count: IngredientCountAggregateOutputType | null
  _min: IngredientMinAggregateOutputType | null
  _max: IngredientMaxAggregateOutputType | null
}

type GetIngredientGroupByPayload<T extends IngredientGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IngredientGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IngredientGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IngredientGroupByOutputType[P]>
      }
    >
  > 



export type IngredientWhereInput = {
  AND?: Prisma.IngredientWhereInput | Prisma.IngredientWhereInput[]
  OR?: Prisma.IngredientWhereInput[]
  NOT?: Prisma.IngredientWhereInput | Prisma.IngredientWhereInput[]
  id?: Prisma.StringFilter<"Ingredient"> | string
  title?: Prisma.StringFilter<"Ingredient"> | string
  vegetarian?: Prisma.BoolFilter<"Ingredient"> | boolean
  halal?: Prisma.BoolFilter<"Ingredient"> | boolean
  noGluten?: Prisma.BoolFilter<"Ingredient"> | boolean
  noLactose?: Prisma.BoolFilter<"Ingredient"> | boolean
  foods?: Prisma.FoodListRelationFilter
  orderItemToRemoved?: Prisma.OrderItemListRelationFilter
}

export type IngredientOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  vegetarian?: Prisma.SortOrder
  halal?: Prisma.SortOrder
  noGluten?: Prisma.SortOrder
  noLactose?: Prisma.SortOrder
  foods?: Prisma.FoodOrderByRelationAggregateInput
  orderItemToRemoved?: Prisma.OrderItemOrderByRelationAggregateInput
}

export type IngredientWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  title?: string
  AND?: Prisma.IngredientWhereInput | Prisma.IngredientWhereInput[]
  OR?: Prisma.IngredientWhereInput[]
  NOT?: Prisma.IngredientWhereInput | Prisma.IngredientWhereInput[]
  vegetarian?: Prisma.BoolFilter<"Ingredient"> | boolean
  halal?: Prisma.BoolFilter<"Ingredient"> | boolean
  noGluten?: Prisma.BoolFilter<"Ingredient"> | boolean
  noLactose?: Prisma.BoolFilter<"Ingredient"> | boolean
  foods?: Prisma.FoodListRelationFilter
  orderItemToRemoved?: Prisma.OrderItemListRelationFilter
}, "id" | "title">

export type IngredientOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  vegetarian?: Prisma.SortOrder
  halal?: Prisma.SortOrder
  noGluten?: Prisma.SortOrder
  noLactose?: Prisma.SortOrder
  _count?: Prisma.IngredientCountOrderByAggregateInput
  _max?: Prisma.IngredientMaxOrderByAggregateInput
  _min?: Prisma.IngredientMinOrderByAggregateInput
}

export type IngredientScalarWhereWithAggregatesInput = {
  AND?: Prisma.IngredientScalarWhereWithAggregatesInput | Prisma.IngredientScalarWhereWithAggregatesInput[]
  OR?: Prisma.IngredientScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IngredientScalarWhereWithAggregatesInput | Prisma.IngredientScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Ingredient"> | string
  title?: Prisma.StringWithAggregatesFilter<"Ingredient"> | string
  vegetarian?: Prisma.BoolWithAggregatesFilter<"Ingredient"> | boolean
  halal?: Prisma.BoolWithAggregatesFilter<"Ingredient"> | boolean
  noGluten?: Prisma.BoolWithAggregatesFilter<"Ingredient"> | boolean
  noLactose?: Prisma.BoolWithAggregatesFilter<"Ingredient"> | boolean
}

export type IngredientCreateInput = {
  id?: string
  title: string
  vegetarian: boolean
  halal: boolean
  noGluten: boolean
  noLactose: boolean
  foods?: Prisma.FoodCreateNestedManyWithoutIngredientsInput
  orderItemToRemoved?: Prisma.OrderItemCreateNestedManyWithoutRemovedIngredientsInput
}

export type IngredientUncheckedCreateInput = {
  id?: string
  title: string
  vegetarian: boolean
  halal: boolean
  noGluten: boolean
  noLactose: boolean
  foods?: Prisma.FoodUncheckedCreateNestedManyWithoutIngredientsInput
  orderItemToRemoved?: Prisma.OrderItemUncheckedCreateNestedManyWithoutRemovedIngredientsInput
}

export type IngredientUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
  foods?: Prisma.FoodUpdateManyWithoutIngredientsNestedInput
  orderItemToRemoved?: Prisma.OrderItemUpdateManyWithoutRemovedIngredientsNestedInput
}

export type IngredientUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
  foods?: Prisma.FoodUncheckedUpdateManyWithoutIngredientsNestedInput
  orderItemToRemoved?: Prisma.OrderItemUncheckedUpdateManyWithoutRemovedIngredientsNestedInput
}

export type IngredientCreateManyInput = {
  id?: string
  title: string
  vegetarian: boolean
  halal: boolean
  noGluten: boolean
  noLactose: boolean
}

export type IngredientUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type IngredientUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type IngredientListRelationFilter = {
  every?: Prisma.IngredientWhereInput
  some?: Prisma.IngredientWhereInput
  none?: Prisma.IngredientWhereInput
}

export type IngredientOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IngredientCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  vegetarian?: Prisma.SortOrder
  halal?: Prisma.SortOrder
  noGluten?: Prisma.SortOrder
  noLactose?: Prisma.SortOrder
}

export type IngredientMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  vegetarian?: Prisma.SortOrder
  halal?: Prisma.SortOrder
  noGluten?: Prisma.SortOrder
  noLactose?: Prisma.SortOrder
}

export type IngredientMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  vegetarian?: Prisma.SortOrder
  halal?: Prisma.SortOrder
  noGluten?: Prisma.SortOrder
  noLactose?: Prisma.SortOrder
}

export type IngredientCreateNestedManyWithoutFoodsInput = {
  create?: Prisma.XOR<Prisma.IngredientCreateWithoutFoodsInput, Prisma.IngredientUncheckedCreateWithoutFoodsInput> | Prisma.IngredientCreateWithoutFoodsInput[] | Prisma.IngredientUncheckedCreateWithoutFoodsInput[]
  connectOrCreate?: Prisma.IngredientCreateOrConnectWithoutFoodsInput | Prisma.IngredientCreateOrConnectWithoutFoodsInput[]
  connect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
}

export type IngredientUncheckedCreateNestedManyWithoutFoodsInput = {
  create?: Prisma.XOR<Prisma.IngredientCreateWithoutFoodsInput, Prisma.IngredientUncheckedCreateWithoutFoodsInput> | Prisma.IngredientCreateWithoutFoodsInput[] | Prisma.IngredientUncheckedCreateWithoutFoodsInput[]
  connectOrCreate?: Prisma.IngredientCreateOrConnectWithoutFoodsInput | Prisma.IngredientCreateOrConnectWithoutFoodsInput[]
  connect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
}

export type IngredientUpdateManyWithoutFoodsNestedInput = {
  create?: Prisma.XOR<Prisma.IngredientCreateWithoutFoodsInput, Prisma.IngredientUncheckedCreateWithoutFoodsInput> | Prisma.IngredientCreateWithoutFoodsInput[] | Prisma.IngredientUncheckedCreateWithoutFoodsInput[]
  connectOrCreate?: Prisma.IngredientCreateOrConnectWithoutFoodsInput | Prisma.IngredientCreateOrConnectWithoutFoodsInput[]
  upsert?: Prisma.IngredientUpsertWithWhereUniqueWithoutFoodsInput | Prisma.IngredientUpsertWithWhereUniqueWithoutFoodsInput[]
  set?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  disconnect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  delete?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  connect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  update?: Prisma.IngredientUpdateWithWhereUniqueWithoutFoodsInput | Prisma.IngredientUpdateWithWhereUniqueWithoutFoodsInput[]
  updateMany?: Prisma.IngredientUpdateManyWithWhereWithoutFoodsInput | Prisma.IngredientUpdateManyWithWhereWithoutFoodsInput[]
  deleteMany?: Prisma.IngredientScalarWhereInput | Prisma.IngredientScalarWhereInput[]
}

export type IngredientUncheckedUpdateManyWithoutFoodsNestedInput = {
  create?: Prisma.XOR<Prisma.IngredientCreateWithoutFoodsInput, Prisma.IngredientUncheckedCreateWithoutFoodsInput> | Prisma.IngredientCreateWithoutFoodsInput[] | Prisma.IngredientUncheckedCreateWithoutFoodsInput[]
  connectOrCreate?: Prisma.IngredientCreateOrConnectWithoutFoodsInput | Prisma.IngredientCreateOrConnectWithoutFoodsInput[]
  upsert?: Prisma.IngredientUpsertWithWhereUniqueWithoutFoodsInput | Prisma.IngredientUpsertWithWhereUniqueWithoutFoodsInput[]
  set?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  disconnect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  delete?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  connect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  update?: Prisma.IngredientUpdateWithWhereUniqueWithoutFoodsInput | Prisma.IngredientUpdateWithWhereUniqueWithoutFoodsInput[]
  updateMany?: Prisma.IngredientUpdateManyWithWhereWithoutFoodsInput | Prisma.IngredientUpdateManyWithWhereWithoutFoodsInput[]
  deleteMany?: Prisma.IngredientScalarWhereInput | Prisma.IngredientScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type IngredientCreateNestedManyWithoutOrderItemToRemovedInput = {
  create?: Prisma.XOR<Prisma.IngredientCreateWithoutOrderItemToRemovedInput, Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput> | Prisma.IngredientCreateWithoutOrderItemToRemovedInput[] | Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput[]
  connectOrCreate?: Prisma.IngredientCreateOrConnectWithoutOrderItemToRemovedInput | Prisma.IngredientCreateOrConnectWithoutOrderItemToRemovedInput[]
  connect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
}

export type IngredientUncheckedCreateNestedManyWithoutOrderItemToRemovedInput = {
  create?: Prisma.XOR<Prisma.IngredientCreateWithoutOrderItemToRemovedInput, Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput> | Prisma.IngredientCreateWithoutOrderItemToRemovedInput[] | Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput[]
  connectOrCreate?: Prisma.IngredientCreateOrConnectWithoutOrderItemToRemovedInput | Prisma.IngredientCreateOrConnectWithoutOrderItemToRemovedInput[]
  connect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
}

export type IngredientUpdateManyWithoutOrderItemToRemovedNestedInput = {
  create?: Prisma.XOR<Prisma.IngredientCreateWithoutOrderItemToRemovedInput, Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput> | Prisma.IngredientCreateWithoutOrderItemToRemovedInput[] | Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput[]
  connectOrCreate?: Prisma.IngredientCreateOrConnectWithoutOrderItemToRemovedInput | Prisma.IngredientCreateOrConnectWithoutOrderItemToRemovedInput[]
  upsert?: Prisma.IngredientUpsertWithWhereUniqueWithoutOrderItemToRemovedInput | Prisma.IngredientUpsertWithWhereUniqueWithoutOrderItemToRemovedInput[]
  set?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  disconnect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  delete?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  connect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  update?: Prisma.IngredientUpdateWithWhereUniqueWithoutOrderItemToRemovedInput | Prisma.IngredientUpdateWithWhereUniqueWithoutOrderItemToRemovedInput[]
  updateMany?: Prisma.IngredientUpdateManyWithWhereWithoutOrderItemToRemovedInput | Prisma.IngredientUpdateManyWithWhereWithoutOrderItemToRemovedInput[]
  deleteMany?: Prisma.IngredientScalarWhereInput | Prisma.IngredientScalarWhereInput[]
}

export type IngredientUncheckedUpdateManyWithoutOrderItemToRemovedNestedInput = {
  create?: Prisma.XOR<Prisma.IngredientCreateWithoutOrderItemToRemovedInput, Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput> | Prisma.IngredientCreateWithoutOrderItemToRemovedInput[] | Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput[]
  connectOrCreate?: Prisma.IngredientCreateOrConnectWithoutOrderItemToRemovedInput | Prisma.IngredientCreateOrConnectWithoutOrderItemToRemovedInput[]
  upsert?: Prisma.IngredientUpsertWithWhereUniqueWithoutOrderItemToRemovedInput | Prisma.IngredientUpsertWithWhereUniqueWithoutOrderItemToRemovedInput[]
  set?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  disconnect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  delete?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  connect?: Prisma.IngredientWhereUniqueInput | Prisma.IngredientWhereUniqueInput[]
  update?: Prisma.IngredientUpdateWithWhereUniqueWithoutOrderItemToRemovedInput | Prisma.IngredientUpdateWithWhereUniqueWithoutOrderItemToRemovedInput[]
  updateMany?: Prisma.IngredientUpdateManyWithWhereWithoutOrderItemToRemovedInput | Prisma.IngredientUpdateManyWithWhereWithoutOrderItemToRemovedInput[]
  deleteMany?: Prisma.IngredientScalarWhereInput | Prisma.IngredientScalarWhereInput[]
}

export type IngredientCreateWithoutFoodsInput = {
  id?: string
  title: string
  vegetarian: boolean
  halal: boolean
  noGluten: boolean
  noLactose: boolean
  orderItemToRemoved?: Prisma.OrderItemCreateNestedManyWithoutRemovedIngredientsInput
}

export type IngredientUncheckedCreateWithoutFoodsInput = {
  id?: string
  title: string
  vegetarian: boolean
  halal: boolean
  noGluten: boolean
  noLactose: boolean
  orderItemToRemoved?: Prisma.OrderItemUncheckedCreateNestedManyWithoutRemovedIngredientsInput
}

export type IngredientCreateOrConnectWithoutFoodsInput = {
  where: Prisma.IngredientWhereUniqueInput
  create: Prisma.XOR<Prisma.IngredientCreateWithoutFoodsInput, Prisma.IngredientUncheckedCreateWithoutFoodsInput>
}

export type IngredientUpsertWithWhereUniqueWithoutFoodsInput = {
  where: Prisma.IngredientWhereUniqueInput
  update: Prisma.XOR<Prisma.IngredientUpdateWithoutFoodsInput, Prisma.IngredientUncheckedUpdateWithoutFoodsInput>
  create: Prisma.XOR<Prisma.IngredientCreateWithoutFoodsInput, Prisma.IngredientUncheckedCreateWithoutFoodsInput>
}

export type IngredientUpdateWithWhereUniqueWithoutFoodsInput = {
  where: Prisma.IngredientWhereUniqueInput
  data: Prisma.XOR<Prisma.IngredientUpdateWithoutFoodsInput, Prisma.IngredientUncheckedUpdateWithoutFoodsInput>
}

export type IngredientUpdateManyWithWhereWithoutFoodsInput = {
  where: Prisma.IngredientScalarWhereInput
  data: Prisma.XOR<Prisma.IngredientUpdateManyMutationInput, Prisma.IngredientUncheckedUpdateManyWithoutFoodsInput>
}

export type IngredientScalarWhereInput = {
  AND?: Prisma.IngredientScalarWhereInput | Prisma.IngredientScalarWhereInput[]
  OR?: Prisma.IngredientScalarWhereInput[]
  NOT?: Prisma.IngredientScalarWhereInput | Prisma.IngredientScalarWhereInput[]
  id?: Prisma.StringFilter<"Ingredient"> | string
  title?: Prisma.StringFilter<"Ingredient"> | string
  vegetarian?: Prisma.BoolFilter<"Ingredient"> | boolean
  halal?: Prisma.BoolFilter<"Ingredient"> | boolean
  noGluten?: Prisma.BoolFilter<"Ingredient"> | boolean
  noLactose?: Prisma.BoolFilter<"Ingredient"> | boolean
}

export type IngredientCreateWithoutOrderItemToRemovedInput = {
  id?: string
  title: string
  vegetarian: boolean
  halal: boolean
  noGluten: boolean
  noLactose: boolean
  foods?: Prisma.FoodCreateNestedManyWithoutIngredientsInput
}

export type IngredientUncheckedCreateWithoutOrderItemToRemovedInput = {
  id?: string
  title: string
  vegetarian: boolean
  halal: boolean
  noGluten: boolean
  noLactose: boolean
  foods?: Prisma.FoodUncheckedCreateNestedManyWithoutIngredientsInput
}

export type IngredientCreateOrConnectWithoutOrderItemToRemovedInput = {
  where: Prisma.IngredientWhereUniqueInput
  create: Prisma.XOR<Prisma.IngredientCreateWithoutOrderItemToRemovedInput, Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput>
}

export type IngredientUpsertWithWhereUniqueWithoutOrderItemToRemovedInput = {
  where: Prisma.IngredientWhereUniqueInput
  update: Prisma.XOR<Prisma.IngredientUpdateWithoutOrderItemToRemovedInput, Prisma.IngredientUncheckedUpdateWithoutOrderItemToRemovedInput>
  create: Prisma.XOR<Prisma.IngredientCreateWithoutOrderItemToRemovedInput, Prisma.IngredientUncheckedCreateWithoutOrderItemToRemovedInput>
}

export type IngredientUpdateWithWhereUniqueWithoutOrderItemToRemovedInput = {
  where: Prisma.IngredientWhereUniqueInput
  data: Prisma.XOR<Prisma.IngredientUpdateWithoutOrderItemToRemovedInput, Prisma.IngredientUncheckedUpdateWithoutOrderItemToRemovedInput>
}

export type IngredientUpdateManyWithWhereWithoutOrderItemToRemovedInput = {
  where: Prisma.IngredientScalarWhereInput
  data: Prisma.XOR<Prisma.IngredientUpdateManyMutationInput, Prisma.IngredientUncheckedUpdateManyWithoutOrderItemToRemovedInput>
}

export type IngredientUpdateWithoutFoodsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderItemToRemoved?: Prisma.OrderItemUpdateManyWithoutRemovedIngredientsNestedInput
}

export type IngredientUncheckedUpdateWithoutFoodsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderItemToRemoved?: Prisma.OrderItemUncheckedUpdateManyWithoutRemovedIngredientsNestedInput
}

export type IngredientUncheckedUpdateManyWithoutFoodsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type IngredientUpdateWithoutOrderItemToRemovedInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
  foods?: Prisma.FoodUpdateManyWithoutIngredientsNestedInput
}

export type IngredientUncheckedUpdateWithoutOrderItemToRemovedInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
  foods?: Prisma.FoodUncheckedUpdateManyWithoutIngredientsNestedInput
}

export type IngredientUncheckedUpdateManyWithoutOrderItemToRemovedInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  vegetarian?: Prisma.BoolFieldUpdateOperationsInput | boolean
  halal?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noGluten?: Prisma.BoolFieldUpdateOperationsInput | boolean
  noLactose?: Prisma.BoolFieldUpdateOperationsInput | boolean
}


/**
 * Count Type IngredientCountOutputType
 */

export type IngredientCountOutputType = {
  foods: number
  orderItemToRemoved: number
}

export type IngredientCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  foods?: boolean | IngredientCountOutputTypeCountFoodsArgs
  orderItemToRemoved?: boolean | IngredientCountOutputTypeCountOrderItemToRemovedArgs
}

/**
 * IngredientCountOutputType without action
 */
export type IngredientCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IngredientCountOutputType
   */
  select?: Prisma.IngredientCountOutputTypeSelect<ExtArgs> | null
}

/**
 * IngredientCountOutputType without action
 */
export type IngredientCountOutputTypeCountFoodsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FoodWhereInput
}

/**
 * IngredientCountOutputType without action
 */
export type IngredientCountOutputTypeCountOrderItemToRemovedArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderItemWhereInput
}


export type IngredientSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  vegetarian?: boolean
  halal?: boolean
  noGluten?: boolean
  noLactose?: boolean
  foods?: boolean | Prisma.Ingredient$foodsArgs<ExtArgs>
  orderItemToRemoved?: boolean | Prisma.Ingredient$orderItemToRemovedArgs<ExtArgs>
  _count?: boolean | Prisma.IngredientCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ingredient"]>

export type IngredientSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  vegetarian?: boolean
  halal?: boolean
  noGluten?: boolean
  noLactose?: boolean
}, ExtArgs["result"]["ingredient"]>

export type IngredientSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  vegetarian?: boolean
  halal?: boolean
  noGluten?: boolean
  noLactose?: boolean
}, ExtArgs["result"]["ingredient"]>

export type IngredientSelectScalar = {
  id?: boolean
  title?: boolean
  vegetarian?: boolean
  halal?: boolean
  noGluten?: boolean
  noLactose?: boolean
}

export type IngredientOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "vegetarian" | "halal" | "noGluten" | "noLactose", ExtArgs["result"]["ingredient"]>
export type IngredientInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  foods?: boolean | Prisma.Ingredient$foodsArgs<ExtArgs>
  orderItemToRemoved?: boolean | Prisma.Ingredient$orderItemToRemovedArgs<ExtArgs>
  _count?: boolean | Prisma.IngredientCountOutputTypeDefaultArgs<ExtArgs>
}
export type IngredientIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type IngredientIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $IngredientPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Ingredient"
  objects: {
    foods: Prisma.$FoodPayload<ExtArgs>[]
    orderItemToRemoved: Prisma.$OrderItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    vegetarian: boolean
    halal: boolean
    noGluten: boolean
    noLactose: boolean
  }, ExtArgs["result"]["ingredient"]>
  composites: {}
}

export type IngredientGetPayload<S extends boolean | null | undefined | IngredientDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IngredientPayload, S>

export type IngredientCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IngredientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IngredientCountAggregateInputType | true
  }

export interface IngredientDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ingredient'], meta: { name: 'Ingredient' } }
  /**
   * Find zero or one Ingredient that matches the filter.
   * @param {IngredientFindUniqueArgs} args - Arguments to find a Ingredient
   * @example
   * // Get one Ingredient
   * const ingredient = await prisma.ingredient.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IngredientFindUniqueArgs>(args: Prisma.SelectSubset<T, IngredientFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IngredientClient<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Ingredient that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IngredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
   * @example
   * // Get one Ingredient
   * const ingredient = await prisma.ingredient.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IngredientFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IngredientClient<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ingredient that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IngredientFindFirstArgs} args - Arguments to find a Ingredient
   * @example
   * // Get one Ingredient
   * const ingredient = await prisma.ingredient.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IngredientFindFirstArgs>(args?: Prisma.SelectSubset<T, IngredientFindFirstArgs<ExtArgs>>): Prisma.Prisma__IngredientClient<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ingredient that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IngredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
   * @example
   * // Get one Ingredient
   * const ingredient = await prisma.ingredient.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IngredientFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IngredientClient<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Ingredients that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IngredientFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Ingredients
   * const ingredients = await prisma.ingredient.findMany()
   * 
   * // Get first 10 Ingredients
   * const ingredients = await prisma.ingredient.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ingredientWithIdOnly = await prisma.ingredient.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IngredientFindManyArgs>(args?: Prisma.SelectSubset<T, IngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Ingredient.
   * @param {IngredientCreateArgs} args - Arguments to create a Ingredient.
   * @example
   * // Create one Ingredient
   * const Ingredient = await prisma.ingredient.create({
   *   data: {
   *     // ... data to create a Ingredient
   *   }
   * })
   * 
   */
  create<T extends IngredientCreateArgs>(args: Prisma.SelectSubset<T, IngredientCreateArgs<ExtArgs>>): Prisma.Prisma__IngredientClient<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Ingredients.
   * @param {IngredientCreateManyArgs} args - Arguments to create many Ingredients.
   * @example
   * // Create many Ingredients
   * const ingredient = await prisma.ingredient.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IngredientCreateManyArgs>(args?: Prisma.SelectSubset<T, IngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Ingredients and returns the data saved in the database.
   * @param {IngredientCreateManyAndReturnArgs} args - Arguments to create many Ingredients.
   * @example
   * // Create many Ingredients
   * const ingredient = await prisma.ingredient.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Ingredients and only return the `id`
   * const ingredientWithIdOnly = await prisma.ingredient.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IngredientCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Ingredient.
   * @param {IngredientDeleteArgs} args - Arguments to delete one Ingredient.
   * @example
   * // Delete one Ingredient
   * const Ingredient = await prisma.ingredient.delete({
   *   where: {
   *     // ... filter to delete one Ingredient
   *   }
   * })
   * 
   */
  delete<T extends IngredientDeleteArgs>(args: Prisma.SelectSubset<T, IngredientDeleteArgs<ExtArgs>>): Prisma.Prisma__IngredientClient<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Ingredient.
   * @param {IngredientUpdateArgs} args - Arguments to update one Ingredient.
   * @example
   * // Update one Ingredient
   * const ingredient = await prisma.ingredient.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IngredientUpdateArgs>(args: Prisma.SelectSubset<T, IngredientUpdateArgs<ExtArgs>>): Prisma.Prisma__IngredientClient<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Ingredients.
   * @param {IngredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
   * @example
   * // Delete a few Ingredients
   * const { count } = await prisma.ingredient.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IngredientDeleteManyArgs>(args?: Prisma.SelectSubset<T, IngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ingredients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IngredientUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Ingredients
   * const ingredient = await prisma.ingredient.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IngredientUpdateManyArgs>(args: Prisma.SelectSubset<T, IngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ingredients and returns the data updated in the database.
   * @param {IngredientUpdateManyAndReturnArgs} args - Arguments to update many Ingredients.
   * @example
   * // Update many Ingredients
   * const ingredient = await prisma.ingredient.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Ingredients and only return the `id`
   * const ingredientWithIdOnly = await prisma.ingredient.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IngredientUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IngredientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Ingredient.
   * @param {IngredientUpsertArgs} args - Arguments to update or create a Ingredient.
   * @example
   * // Update or create a Ingredient
   * const ingredient = await prisma.ingredient.upsert({
   *   create: {
   *     // ... data to create a Ingredient
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ingredient we want to update
   *   }
   * })
   */
  upsert<T extends IngredientUpsertArgs>(args: Prisma.SelectSubset<T, IngredientUpsertArgs<ExtArgs>>): Prisma.Prisma__IngredientClient<runtime.Types.Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Ingredients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IngredientCountArgs} args - Arguments to filter Ingredients to count.
   * @example
   * // Count the number of Ingredients
   * const count = await prisma.ingredient.count({
   *   where: {
   *     // ... the filter for the Ingredients we want to count
   *   }
   * })
  **/
  count<T extends IngredientCountArgs>(
    args?: Prisma.Subset<T, IngredientCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IngredientCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Ingredient.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IngredientAggregateArgs>(args: Prisma.Subset<T, IngredientAggregateArgs>): Prisma.PrismaPromise<GetIngredientAggregateType<T>>

  /**
   * Group by Ingredient.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IngredientGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IngredientGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IngredientGroupByArgs['orderBy'] }
      : { orderBy?: IngredientGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Ingredient model
 */
readonly fields: IngredientFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Ingredient.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IngredientClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  foods<T extends Prisma.Ingredient$foodsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Ingredient$foodsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  orderItemToRemoved<T extends Prisma.Ingredient$orderItemToRemovedArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Ingredient$orderItemToRemovedArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Ingredient model
 */
export interface IngredientFieldRefs {
  readonly id: Prisma.FieldRef<"Ingredient", 'String'>
  readonly title: Prisma.FieldRef<"Ingredient", 'String'>
  readonly vegetarian: Prisma.FieldRef<"Ingredient", 'Boolean'>
  readonly halal: Prisma.FieldRef<"Ingredient", 'Boolean'>
  readonly noGluten: Prisma.FieldRef<"Ingredient", 'Boolean'>
  readonly noLactose: Prisma.FieldRef<"Ingredient", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Ingredient findUnique
 */
export type IngredientFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * Filter, which Ingredient to fetch.
   */
  where: Prisma.IngredientWhereUniqueInput
}

/**
 * Ingredient findUniqueOrThrow
 */
export type IngredientFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * Filter, which Ingredient to fetch.
   */
  where: Prisma.IngredientWhereUniqueInput
}

/**
 * Ingredient findFirst
 */
export type IngredientFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * Filter, which Ingredient to fetch.
   */
  where?: Prisma.IngredientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ingredients to fetch.
   */
  orderBy?: Prisma.IngredientOrderByWithRelationInput | Prisma.IngredientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ingredients.
   */
  cursor?: Prisma.IngredientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ingredients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ingredients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ingredients.
   */
  distinct?: Prisma.IngredientScalarFieldEnum | Prisma.IngredientScalarFieldEnum[]
}

/**
 * Ingredient findFirstOrThrow
 */
export type IngredientFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * Filter, which Ingredient to fetch.
   */
  where?: Prisma.IngredientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ingredients to fetch.
   */
  orderBy?: Prisma.IngredientOrderByWithRelationInput | Prisma.IngredientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ingredients.
   */
  cursor?: Prisma.IngredientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ingredients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ingredients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ingredients.
   */
  distinct?: Prisma.IngredientScalarFieldEnum | Prisma.IngredientScalarFieldEnum[]
}

/**
 * Ingredient findMany
 */
export type IngredientFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * Filter, which Ingredients to fetch.
   */
  where?: Prisma.IngredientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ingredients to fetch.
   */
  orderBy?: Prisma.IngredientOrderByWithRelationInput | Prisma.IngredientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Ingredients.
   */
  cursor?: Prisma.IngredientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ingredients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ingredients.
   */
  skip?: number
  distinct?: Prisma.IngredientScalarFieldEnum | Prisma.IngredientScalarFieldEnum[]
}

/**
 * Ingredient create
 */
export type IngredientCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * The data needed to create a Ingredient.
   */
  data: Prisma.XOR<Prisma.IngredientCreateInput, Prisma.IngredientUncheckedCreateInput>
}

/**
 * Ingredient createMany
 */
export type IngredientCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Ingredients.
   */
  data: Prisma.IngredientCreateManyInput | Prisma.IngredientCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Ingredient createManyAndReturn
 */
export type IngredientCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * The data used to create many Ingredients.
   */
  data: Prisma.IngredientCreateManyInput | Prisma.IngredientCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Ingredient update
 */
export type IngredientUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * The data needed to update a Ingredient.
   */
  data: Prisma.XOR<Prisma.IngredientUpdateInput, Prisma.IngredientUncheckedUpdateInput>
  /**
   * Choose, which Ingredient to update.
   */
  where: Prisma.IngredientWhereUniqueInput
}

/**
 * Ingredient updateMany
 */
export type IngredientUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Ingredients.
   */
  data: Prisma.XOR<Prisma.IngredientUpdateManyMutationInput, Prisma.IngredientUncheckedUpdateManyInput>
  /**
   * Filter which Ingredients to update
   */
  where?: Prisma.IngredientWhereInput
  /**
   * Limit how many Ingredients to update.
   */
  limit?: number
}

/**
 * Ingredient updateManyAndReturn
 */
export type IngredientUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * The data used to update Ingredients.
   */
  data: Prisma.XOR<Prisma.IngredientUpdateManyMutationInput, Prisma.IngredientUncheckedUpdateManyInput>
  /**
   * Filter which Ingredients to update
   */
  where?: Prisma.IngredientWhereInput
  /**
   * Limit how many Ingredients to update.
   */
  limit?: number
}

/**
 * Ingredient upsert
 */
export type IngredientUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * The filter to search for the Ingredient to update in case it exists.
   */
  where: Prisma.IngredientWhereUniqueInput
  /**
   * In case the Ingredient found by the `where` argument doesn't exist, create a new Ingredient with this data.
   */
  create: Prisma.XOR<Prisma.IngredientCreateInput, Prisma.IngredientUncheckedCreateInput>
  /**
   * In case the Ingredient was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IngredientUpdateInput, Prisma.IngredientUncheckedUpdateInput>
}

/**
 * Ingredient delete
 */
export type IngredientDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
  /**
   * Filter which Ingredient to delete.
   */
  where: Prisma.IngredientWhereUniqueInput
}

/**
 * Ingredient deleteMany
 */
export type IngredientDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ingredients to delete
   */
  where?: Prisma.IngredientWhereInput
  /**
   * Limit how many Ingredients to delete.
   */
  limit?: number
}

/**
 * Ingredient.foods
 */
export type Ingredient$foodsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Food
   */
  select?: Prisma.FoodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Food
   */
  omit?: Prisma.FoodOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FoodInclude<ExtArgs> | null
  where?: Prisma.FoodWhereInput
  orderBy?: Prisma.FoodOrderByWithRelationInput | Prisma.FoodOrderByWithRelationInput[]
  cursor?: Prisma.FoodWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FoodScalarFieldEnum | Prisma.FoodScalarFieldEnum[]
}

/**
 * Ingredient.orderItemToRemoved
 */
export type Ingredient$orderItemToRemovedArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderItem
   */
  select?: Prisma.OrderItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderItem
   */
  omit?: Prisma.OrderItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderItemInclude<ExtArgs> | null
  where?: Prisma.OrderItemWhereInput
  orderBy?: Prisma.OrderItemOrderByWithRelationInput | Prisma.OrderItemOrderByWithRelationInput[]
  cursor?: Prisma.OrderItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderItemScalarFieldEnum | Prisma.OrderItemScalarFieldEnum[]
}

/**
 * Ingredient without action
 */
export type IngredientDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ingredient
   */
  select?: Prisma.IngredientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ingredient
   */
  omit?: Prisma.IngredientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IngredientInclude<ExtArgs> | null
}
